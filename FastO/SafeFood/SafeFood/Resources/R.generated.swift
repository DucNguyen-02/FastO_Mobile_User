//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 23 storyboards.
  struct storyboard {
    /// Storyboard `ChooseVoucherViewController`.
    static let chooseVoucherViewController = _R.storyboard.chooseVoucherViewController()
    /// Storyboard `DetailBrandViewController`.
    static let detailBrandViewController = _R.storyboard.detailBrandViewController()
    /// Storyboard `DetailVoucherViewController`.
    static let detailVoucherViewController = _R.storyboard.detailVoucherViewController()
    /// Storyboard `DigitVerifyCodeViewController`.
    static let digitVerifyCodeViewController = _R.storyboard.digitVerifyCodeViewController()
    /// Storyboard `ForgotPasswordViewController`.
    static let forgotPasswordViewController = _R.storyboard.forgotPasswordViewController()
    /// Storyboard `HomeTopChartBrandViewController`.
    static let homeTopChartBrandViewController = _R.storyboard.homeTopChartBrandViewController()
    /// Storyboard `HomeTopChartCommunityViewController`.
    static let homeTopChartCommunityViewController = _R.storyboard.homeTopChartCommunityViewController()
    /// Storyboard `HomeTopChartVoucherViewController`.
    static let homeTopChartVoucherViewController = _R.storyboard.homeTopChartVoucherViewController()
    /// Storyboard `HomeViewController`.
    static let homeViewController = _R.storyboard.homeViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `ListBrandApplyVoucherViewController`.
    static let listBrandApplyVoucherViewController = _R.storyboard.listBrandApplyVoucherViewController()
    /// Storyboard `ListHotVoucherViewController`.
    static let listHotVoucherViewController = _R.storyboard.listHotVoucherViewController()
    /// Storyboard `ListRecentBrandViewController`.
    static let listRecentBrandViewController = _R.storyboard.listRecentBrandViewController()
    /// Storyboard `ListVoucherViewController`.
    static let listVoucherViewController = _R.storyboard.listVoucherViewController()
    /// Storyboard `LocationViewController`.
    static let locationViewController = _R.storyboard.locationViewController()
    /// Storyboard `ManagerViewController`.
    static let managerViewController = _R.storyboard.managerViewController()
    /// Storyboard `MenuBrandViewController`.
    static let menuBrandViewController = _R.storyboard.menuBrandViewController()
    /// Storyboard `RatingViewController`.
    static let ratingViewController = _R.storyboard.ratingViewController()
    /// Storyboard `ResetPasswordViewController`.
    static let resetPasswordViewController = _R.storyboard.resetPasswordViewController()
    /// Storyboard `SearchViewController`.
    static let searchViewController = _R.storyboard.searchViewController()
    /// Storyboard `SettingViewController`.
    static let settingViewController = _R.storyboard.settingViewController()
    /// Storyboard `SignInViewController`.
    static let signInViewController = _R.storyboard.signInViewController()
    /// Storyboard `SignUpViewController`.
    static let signUpViewController = _R.storyboard.signUpViewController()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ChooseVoucherViewController", bundle: ...)`
    static func chooseVoucherViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.chooseVoucherViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DetailBrandViewController", bundle: ...)`
    static func detailBrandViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detailBrandViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DetailVoucherViewController", bundle: ...)`
    static func detailVoucherViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detailVoucherViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DigitVerifyCodeViewController", bundle: ...)`
    static func digitVerifyCodeViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.digitVerifyCodeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ForgotPasswordViewController", bundle: ...)`
    static func forgotPasswordViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.forgotPasswordViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HomeTopChartBrandViewController", bundle: ...)`
    static func homeTopChartBrandViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeTopChartBrandViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HomeTopChartCommunityViewController", bundle: ...)`
    static func homeTopChartCommunityViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeTopChartCommunityViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HomeTopChartVoucherViewController", bundle: ...)`
    static func homeTopChartVoucherViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeTopChartVoucherViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HomeViewController", bundle: ...)`
    static func homeViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ListBrandApplyVoucherViewController", bundle: ...)`
    static func listBrandApplyVoucherViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.listBrandApplyVoucherViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ListHotVoucherViewController", bundle: ...)`
    static func listHotVoucherViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.listHotVoucherViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ListRecentBrandViewController", bundle: ...)`
    static func listRecentBrandViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.listRecentBrandViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ListVoucherViewController", bundle: ...)`
    static func listVoucherViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.listVoucherViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LocationViewController", bundle: ...)`
    static func locationViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.locationViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ManagerViewController", bundle: ...)`
    static func managerViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.managerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MenuBrandViewController", bundle: ...)`
    static func menuBrandViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menuBrandViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RatingViewController", bundle: ...)`
    static func ratingViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.ratingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ResetPasswordViewController", bundle: ...)`
    static func resetPasswordViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.resetPasswordViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SearchViewController", bundle: ...)`
    static func searchViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SettingViewController", bundle: ...)`
    static func settingViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SignInViewController", bundle: ...)`
    static func signInViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signInViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SignUpViewController", bundle: ...)`
    static func signUpViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signUpViewController)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 24 colors.
  struct color {
    /// Color `Blue4285F4`.
    static let blue4285F4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Blue4285F4")
    /// Color `GrayE8E8E8`.
    static let grayE8E8E8 = Rswift.ColorResource(bundle: R.hostingBundle, name: "GrayE8E8E8")
    /// Color `black060606`.
    static let black060606 = Rswift.ColorResource(bundle: R.hostingBundle, name: "black060606")
    /// Color `black100`.
    static let black100 = Rswift.ColorResource(bundle: R.hostingBundle, name: "black100")
    /// Color `black1A1A1A`.
    static let black1A1A1A = Rswift.ColorResource(bundle: R.hostingBundle, name: "black1A1A1A")
    /// Color `black50`.
    static let black50 = Rswift.ColorResource(bundle: R.hostingBundle, name: "black50")
    /// Color `blue005CBF`.
    static let blue005CBF = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue005CBF")
    /// Color `blue007AFF`.
    static let blue007AFF = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue007AFF")
    /// Color `blue4789FA`.
    static let blue4789FA = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue4789FA")
    /// Color `blueCCE4FF`.
    static let blueCCE4FF = Rswift.ColorResource(bundle: R.hostingBundle, name: "blueCCE4FF")
    /// Color `gray454546`.
    static let gray454546 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray454546")
    /// Color `gray737374`.
    static let gray737374 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray737374")
    /// Color `grayA2A2A3`.
    static let grayA2A2A3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayA2A2A3")
    /// Color `grayBCBCBC`.
    static let grayBCBCBC = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayBCBCBC")
    /// Color `grayC2C3C4`.
    static let grayC2C3C4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayC2C3C4")
    /// Color `grayD6D6D6`.
    static let grayD6D6D6 = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayD6D6D6")
    /// Color `grayD9D9D9`.
    static let grayD9D9D9 = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayD9D9D9")
    /// Color `grayF3F3F3`.
    static let grayF3F3F3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayF3F3F3")
    /// Color `redFF2929`.
    static let redFF2929 = Rswift.ColorResource(bundle: R.hostingBundle, name: "redFF2929")
    /// Color `white100`.
    static let white100 = Rswift.ColorResource(bundle: R.hostingBundle, name: "white100")
    /// Color `whiteF1F1F1`.
    static let whiteF1F1F1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "whiteF1F1F1")
    /// Color `whiteF5F5F5`.
    static let whiteF5F5F5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "whiteF5F5F5")
    /// Color `yellowF8E011`.
    static let yellowF8E011 = Rswift.ColorResource(bundle: R.hostingBundle, name: "yellowF8E011")
    /// Color `yellowFFCF6F`.
    static let yellowFFCF6F = Rswift.ColorResource(bundle: R.hostingBundle, name: "yellowFFCF6F")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Blue4285F4", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue4285F4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue4285F4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GrayE8E8E8", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayE8E8E8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayE8E8E8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black060606", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black060606(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black060606, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black100", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black100, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black1A1A1A", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black1A1A1A(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black1A1A1A, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black50", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black50, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue005CBF", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue005CBF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue005CBF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue007AFF", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue007AFF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue007AFF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue4789FA", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue4789FA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue4789FA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blueCCE4FF", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueCCE4FF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueCCE4FF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray454546", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray454546(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray454546, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray737374", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray737374(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray737374, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayA2A2A3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayA2A2A3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayA2A2A3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayBCBCBC", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayBCBCBC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayBCBCBC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayC2C3C4", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayC2C3C4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayC2C3C4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayD6D6D6", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayD6D6D6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayD6D6D6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayD9D9D9", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayD9D9D9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayD9D9D9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayF3F3F3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayF3F3F3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayF3F3F3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "redFF2929", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redFF2929(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redFF2929, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "white100", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white100, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "whiteF1F1F1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func whiteF1F1F1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.whiteF1F1F1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "whiteF5F5F5", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func whiteF5F5F5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.whiteF5F5F5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "yellowF8E011", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellowF8E011(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellowF8E011, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "yellowFFCF6F", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellowFFCF6F(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellowFFCF6F, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Blue4285F4", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue4285F4(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue4285F4.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GrayE8E8E8", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayE8E8E8(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayE8E8E8.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "black060606", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func black060606(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.black060606.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "black100", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func black100(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.black100.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "black1A1A1A", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func black1A1A1A(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.black1A1A1A.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "black50", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func black50(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.black50.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue005CBF", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue005CBF(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue005CBF.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue007AFF", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue007AFF(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue007AFF.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue4789FA", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue4789FA(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue4789FA.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blueCCE4FF", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blueCCE4FF(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blueCCE4FF.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gray454546", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gray454546(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gray454546.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gray737374", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gray737374(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gray737374.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayA2A2A3", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayA2A2A3(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayA2A2A3.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayBCBCBC", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayBCBCBC(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayBCBCBC.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayC2C3C4", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayC2C3C4(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayC2C3C4.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayD6D6D6", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayD6D6D6(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayD6D6D6.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayD9D9D9", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayD9D9D9(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayD9D9D9.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayF3F3F3", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayF3F3F3(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayF3F3F3.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "redFF2929", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func redFF2929(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.redFF2929.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "white100", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func white100(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.white100.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "whiteF1F1F1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func whiteF1F1F1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.whiteF1F1F1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "whiteF5F5F5", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func whiteF5F5F5(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.whiteF5F5F5.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "yellowF8E011", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellowF8E011(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellowF8E011.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "yellowFFCF6F", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellowFFCF6F(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellowFFCF6F.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 9 files.
  struct file {
    /// Resource file `Lexend-Bold.ttf`.
    static let lexendBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lexend-Bold", pathExtension: "ttf")
    /// Resource file `Lexend-ExtraBold.ttf`.
    static let lexendExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lexend-ExtraBold", pathExtension: "ttf")
    /// Resource file `Lexend-ExtraLight.ttf`.
    static let lexendExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lexend-ExtraLight", pathExtension: "ttf")
    /// Resource file `Lexend-Light.ttf`.
    static let lexendLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lexend-Light", pathExtension: "ttf")
    /// Resource file `Lexend-Medium.ttf`.
    static let lexendMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lexend-Medium", pathExtension: "ttf")
    /// Resource file `Lexend-Regular.ttf`.
    static let lexendRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lexend-Regular", pathExtension: "ttf")
    /// Resource file `Lexend-SemiBold.ttf`.
    static let lexendSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lexend-SemiBold", pathExtension: "ttf")
    /// Resource file `Lexend-Thin.ttf`.
    static let lexendThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lexend-Thin", pathExtension: "ttf")
    /// Resource file `vietnamese.mp4`.
    static let vietnameseMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "vietnamese", pathExtension: "mp4")

    /// `bundle.url(forResource: "Lexend-Bold", withExtension: "ttf")`
    static func lexendBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lexendBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lexend-ExtraBold", withExtension: "ttf")`
    static func lexendExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lexendExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lexend-ExtraLight", withExtension: "ttf")`
    static func lexendExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lexendExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lexend-Light", withExtension: "ttf")`
    static func lexendLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lexendLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lexend-Medium", withExtension: "ttf")`
    static func lexendMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lexendMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lexend-Regular", withExtension: "ttf")`
    static func lexendRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lexendRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lexend-SemiBold", withExtension: "ttf")`
    static func lexendSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lexendSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lexend-Thin", withExtension: "ttf")`
    static func lexendThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lexendThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "vietnamese", withExtension: "mp4")`
    static func vietnameseMp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vietnameseMp4
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `Lexend-Bold`.
    static let lexendBold = Rswift.FontResource(fontName: "Lexend-Bold")
    /// Font `Lexend-ExtraBold`.
    static let lexendExtraBold = Rswift.FontResource(fontName: "Lexend-ExtraBold")
    /// Font `Lexend-ExtraLight`.
    static let lexendExtraLight = Rswift.FontResource(fontName: "Lexend-ExtraLight")
    /// Font `Lexend-Light`.
    static let lexendLight = Rswift.FontResource(fontName: "Lexend-Light")
    /// Font `Lexend-Medium`.
    static let lexendMedium = Rswift.FontResource(fontName: "Lexend-Medium")
    /// Font `Lexend-Regular`.
    static let lexendRegular = Rswift.FontResource(fontName: "Lexend-Regular")
    /// Font `Lexend-SemiBold`.
    static let lexendSemiBold = Rswift.FontResource(fontName: "Lexend-SemiBold")
    /// Font `Lexend-Thin`.
    static let lexendThin = Rswift.FontResource(fontName: "Lexend-Thin")

    /// `UIFont(name: "Lexend-Bold", size: ...)`
    static func lexendBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: lexendBold, size: size)
    }

    /// `UIFont(name: "Lexend-ExtraBold", size: ...)`
    static func lexendExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: lexendExtraBold, size: size)
    }

    /// `UIFont(name: "Lexend-ExtraLight", size: ...)`
    static func lexendExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: lexendExtraLight, size: size)
    }

    /// `UIFont(name: "Lexend-Light", size: ...)`
    static func lexendLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: lexendLight, size: size)
    }

    /// `UIFont(name: "Lexend-Medium", size: ...)`
    static func lexendMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: lexendMedium, size: size)
    }

    /// `UIFont(name: "Lexend-Regular", size: ...)`
    static func lexendRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: lexendRegular, size: size)
    }

    /// `UIFont(name: "Lexend-SemiBold", size: ...)`
    static func lexendSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: lexendSemiBold, size: size)
    }

    /// `UIFont(name: "Lexend-Thin", size: ...)`
    static func lexendThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: lexendThin, size: size)
    }

    static func validate() throws {
      if R.font.lexendBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lexend-Bold' could not be loaded, is 'Lexend-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.lexendExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lexend-ExtraBold' could not be loaded, is 'Lexend-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.lexendExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lexend-ExtraLight' could not be loaded, is 'Lexend-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.lexendLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lexend-Light' could not be loaded, is 'Lexend-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.lexendMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lexend-Medium' could not be loaded, is 'Lexend-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.lexendRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lexend-Regular' could not be loaded, is 'Lexend-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.lexendSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lexend-SemiBold' could not be loaded, is 'Lexend-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.lexendThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lexend-Thin' could not be loaded, is 'Lexend-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 109 images.
  struct image {
    /// Image `authentication-apple`.
    static let authenticationApple = Rswift.ImageResource(bundle: R.hostingBundle, name: "authentication-apple")
    /// Image `authentication-background`.
    static let authenticationBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "authentication-background")
    /// Image `authentication-checkmark-empty`.
    static let authenticationCheckmarkEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "authentication-checkmark-empty")
    /// Image `authentication-checkmark-error`.
    static let authenticationCheckmarkError = Rswift.ImageResource(bundle: R.hostingBundle, name: "authentication-checkmark-error")
    /// Image `authentication-checkmark`.
    static let authenticationCheckmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "authentication-checkmark")
    /// Image `authentication-facebook`.
    static let authenticationFacebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "authentication-facebook")
    /// Image `authentication-google`.
    static let authenticationGoogle = Rswift.ImageResource(bundle: R.hostingBundle, name: "authentication-google")
    /// Image `authentication-kakaotalk`.
    static let authenticationKakaotalk = Rswift.ImageResource(bundle: R.hostingBundle, name: "authentication-kakaotalk")
    /// Image `authentication-password`.
    static let authenticationPassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "authentication-password")
    /// Image `authentication-sign-up-canlendar`.
    static let authenticationSignUpCanlendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "authentication-sign-up-canlendar")
    /// Image `authentication-username`.
    static let authenticationUsername = Rswift.ImageResource(bundle: R.hostingBundle, name: "authentication-username")
    /// Image `authentication`.
    static let authentication = Rswift.ImageResource(bundle: R.hostingBundle, name: "authentication")
    /// Image `bill-qr`.
    static let billQr = Rswift.ImageResource(bundle: R.hostingBundle, name: "bill-qr")
    /// Image `communit-like`.
    static let communitLike = Rswift.ImageResource(bundle: R.hostingBundle, name: "communit-like")
    /// Image `community-comment`.
    static let communityComment = Rswift.ImageResource(bundle: R.hostingBundle, name: "community-comment")
    /// Image `community-selected-like`.
    static let communitySelectedLike = Rswift.ImageResource(bundle: R.hostingBundle, name: "community-selected-like")
    /// Image `detail-brand-choose`.
    static let detailBrandChoose = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-choose")
    /// Image `detail-brand-chosen`.
    static let detailBrandChosen = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-chosen")
    /// Image `detail-brand-clock`.
    static let detailBrandClock = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-clock")
    /// Image `detail-brand-empty-heart`.
    static let detailBrandEmptyHeart = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-empty-heart")
    /// Image `detail-brand-location`.
    static let detailBrandLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-location")
    /// Image `detail-brand-logo-dapass`.
    static let detailBrandLogoDapass = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-logo-dapass")
    /// Image `detail-brand-logo-master-card`.
    static let detailBrandLogoMasterCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-logo-master-card")
    /// Image `detail-brand-logo-visa`.
    static let detailBrandLogoVisa = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-logo-visa")
    /// Image `detail-brand-menu-add`.
    static let detailBrandMenuAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-menu-add")
    /// Image `detail-brand-menu-chosen`.
    static let detailBrandMenuChosen = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-menu-chosen")
    /// Image `detail-brand-menu-minus`.
    static let detailBrandMenuMinus = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-menu-minus")
    /// Image `detail-brand-share`.
    static let detailBrandShare = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-share")
    /// Image `detail-brand-time`.
    static let detailBrandTime = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-time")
    /// Image `detail-brand-under-arrow`.
    static let detailBrandUnderArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail-brand-under-arrow")
    /// Image `heart_red`.
    static let heart_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_red")
    /// Image `home_news_gradient`.
    static let home_news_gradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_news_gradient")
    /// Image `ic-back`.
    static let icBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-back")
    /// Image `ic-change-password`.
    static let icChangePassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-change-password")
    /// Image `ic-close`.
    static let icClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-close")
    /// Image `ic-empty-star`.
    static let icEmptyStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-empty-star")
    /// Image `ic-fill-star`.
    static let icFillStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-fill-star")
    /// Image `ic-halfstar`.
    static let icHalfstar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-halfstar")
    /// Image `ic-language`.
    static let icLanguage = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-language")
    /// Image `ic-lightning`.
    static let icLightning = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-lightning")
    /// Image `ic-placeholderImg`.
    static let icPlaceholderImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-placeholderImg")
    /// Image `ic-setting`.
    static let icSetting = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-setting")
    /// Image `ic-star`.
    static let icStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-star")
    /// Image `ic_apple`.
    static let ic_apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_apple")
    /// Image `ic_arrow_left`.
    static let ic_arrow_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_left")
    /// Image `ic_arrow_right`.
    static let ic_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right")
    /// Image `ic_banner`.
    static let ic_banner = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_banner")
    /// Image `ic_calendar`.
    static let ic_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar")
    /// Image `ic_caretright`.
    static let ic_caretright = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_caretright")
    /// Image `ic_checkmark_empty`.
    static let ic_checkmark_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkmark_empty")
    /// Image `ic_checkmark`.
    static let ic_checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkmark")
    /// Image `ic_close_search`.
    static let ic_close_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close_search")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_congcaphe`.
    static let ic_congcaphe = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_congcaphe")
    /// Image `ic_dapass_logo`.
    static let ic_dapass_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dapass_logo")
    /// Image `ic_date`.
    static let ic_date = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_date")
    /// Image `ic_decrease`.
    static let ic_decrease = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_decrease")
    /// Image `ic_delete`.
    static let ic_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete")
    /// Image `ic_eclipse_gray`.
    static let ic_eclipse_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eclipse_gray")
    /// Image `ic_eclipse`.
    static let ic_eclipse = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eclipse")
    /// Image `ic_eye`.
    static let ic_eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eye")
    /// Image `ic_eyeslash`.
    static let ic_eyeslash = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eyeslash")
    /// Image `ic_global`.
    static let ic_global = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_global")
    /// Image `ic_heart`.
    static let ic_heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heart")
    /// Image `ic_help`.
    static let ic_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_help")
    /// Image `ic_hotvoucher`.
    static let ic_hotvoucher = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hotvoucher")
    /// Image `ic_increase`.
    static let ic_increase = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_increase")
    /// Image `ic_kakaotalk`.
    static let ic_kakaotalk = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_kakaotalk")
    /// Image `ic_level_out`.
    static let ic_level_out = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_level_out")
    /// Image `ic_located`.
    static let ic_located = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_located")
    /// Image `ic_location`.
    static let ic_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location")
    /// Image `ic_mobile`.
    static let ic_mobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mobile")
    /// Image `ic_momo`.
    static let ic_momo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_momo")
    /// Image `ic_not`.
    static let ic_not = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_not")
    /// Image `ic_noti`.
    static let ic_noti = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_noti")
    /// Image `ic_people`.
    static let ic_people = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_people")
    /// Image `ic_percent`.
    static let ic_percent = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_percent")
    /// Image `ic_plus`.
    static let ic_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus")
    /// Image `ic_profile`.
    static let ic_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile")
    /// Image `ic_provide`.
    static let ic_provide = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_provide")
    /// Image `ic_recently`.
    static let ic_recently = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recently")
    /// Image `ic_search_gray`.
    static let ic_search_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_gray")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `ic_see_more`.
    static let ic_see_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_see_more")
    /// Image `ic_selected`.
    static let ic_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_selected")
    /// Image `ic_setting`.
    static let ic_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting")
    /// Image `ic_share`.
    static let ic_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share")
    /// Image `ic_showlist`.
    static let ic_showlist = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_showlist")
    /// Image `ic_suggestion`.
    static let ic_suggestion = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_suggestion")
    /// Image `ic_thunder`.
    static let ic_thunder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_thunder")
    /// Image `ic_topcoupon`.
    static let ic_topcoupon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_topcoupon")
    /// Image `ic_user`.
    static let ic_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user")
    /// Image `ic_visa`.
    static let ic_visa = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_visa")
    /// Image `ic_vnpay`.
    static let ic_vnpay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vnpay")
    /// Image `ic_voucher_date`.
    static let ic_voucher_date = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_voucher_date")
    /// Image `location-category-gradient`.
    static let locationCategoryGradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "location-category-gradient")
    /// Image `location-pin`.
    static let locationPin = Rswift.ImageResource(bundle: R.hostingBundle, name: "location-pin")
    /// Image `logo 1024`.
    static let logo1024 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo 1024")
    /// Image `logo VNPAY-2`.
    static let logoVNPAY2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo VNPAY-2")
    /// Image `nameLaunch`.
    static let nameLaunch = Rswift.ImageResource(bundle: R.hostingBundle, name: "nameLaunch")
    /// Image `page_black`.
    static let page_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "page_black")
    /// Image `page_gray`.
    static let page_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "page_gray")
    /// Image `tabbar_community`.
    static let tabbar_community = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_community")
    /// Image `tabbar_home`.
    static let tabbar_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home")
    /// Image `tabbar_location`.
    static let tabbar_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_location")
    /// Image `tabbar_notification`.
    static let tabbar_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_notification")
    /// Image `tabbar_travel`.
    static let tabbar_travel = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_travel")
    /// Image `tabbar_voucher`.
    static let tabbar_voucher = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_voucher")
    /// Image `voucher_overdue`.
    static let voucher_overdue = Rswift.ImageResource(bundle: R.hostingBundle, name: "voucher_overdue")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authentication", bundle: ..., traitCollection: ...)`
    static func authentication(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authentication, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authentication-apple", bundle: ..., traitCollection: ...)`
    static func authenticationApple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authenticationApple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authentication-background", bundle: ..., traitCollection: ...)`
    static func authenticationBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authenticationBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authentication-checkmark", bundle: ..., traitCollection: ...)`
    static func authenticationCheckmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authenticationCheckmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authentication-checkmark-empty", bundle: ..., traitCollection: ...)`
    static func authenticationCheckmarkEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authenticationCheckmarkEmpty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authentication-checkmark-error", bundle: ..., traitCollection: ...)`
    static func authenticationCheckmarkError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authenticationCheckmarkError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authentication-facebook", bundle: ..., traitCollection: ...)`
    static func authenticationFacebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authenticationFacebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authentication-google", bundle: ..., traitCollection: ...)`
    static func authenticationGoogle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authenticationGoogle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authentication-kakaotalk", bundle: ..., traitCollection: ...)`
    static func authenticationKakaotalk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authenticationKakaotalk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authentication-password", bundle: ..., traitCollection: ...)`
    static func authenticationPassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authenticationPassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authentication-sign-up-canlendar", bundle: ..., traitCollection: ...)`
    static func authenticationSignUpCanlendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authenticationSignUpCanlendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authentication-username", bundle: ..., traitCollection: ...)`
    static func authenticationUsername(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authenticationUsername, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bill-qr", bundle: ..., traitCollection: ...)`
    static func billQr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.billQr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "communit-like", bundle: ..., traitCollection: ...)`
    static func communitLike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.communitLike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "community-comment", bundle: ..., traitCollection: ...)`
    static func communityComment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.communityComment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "community-selected-like", bundle: ..., traitCollection: ...)`
    static func communitySelectedLike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.communitySelectedLike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-choose", bundle: ..., traitCollection: ...)`
    static func detailBrandChoose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandChoose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-chosen", bundle: ..., traitCollection: ...)`
    static func detailBrandChosen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandChosen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-clock", bundle: ..., traitCollection: ...)`
    static func detailBrandClock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandClock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-empty-heart", bundle: ..., traitCollection: ...)`
    static func detailBrandEmptyHeart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandEmptyHeart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-location", bundle: ..., traitCollection: ...)`
    static func detailBrandLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-logo-dapass", bundle: ..., traitCollection: ...)`
    static func detailBrandLogoDapass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandLogoDapass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-logo-master-card", bundle: ..., traitCollection: ...)`
    static func detailBrandLogoMasterCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandLogoMasterCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-logo-visa", bundle: ..., traitCollection: ...)`
    static func detailBrandLogoVisa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandLogoVisa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-menu-add", bundle: ..., traitCollection: ...)`
    static func detailBrandMenuAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandMenuAdd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-menu-chosen", bundle: ..., traitCollection: ...)`
    static func detailBrandMenuChosen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandMenuChosen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-menu-minus", bundle: ..., traitCollection: ...)`
    static func detailBrandMenuMinus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandMenuMinus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-share", bundle: ..., traitCollection: ...)`
    static func detailBrandShare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandShare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-time", bundle: ..., traitCollection: ...)`
    static func detailBrandTime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandTime, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail-brand-under-arrow", bundle: ..., traitCollection: ...)`
    static func detailBrandUnderArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailBrandUnderArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart_red", bundle: ..., traitCollection: ...)`
    static func heart_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_news_gradient", bundle: ..., traitCollection: ...)`
    static func home_news_gradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_news_gradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-back", bundle: ..., traitCollection: ...)`
    static func icBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-change-password", bundle: ..., traitCollection: ...)`
    static func icChangePassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icChangePassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-close", bundle: ..., traitCollection: ...)`
    static func icClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-empty-star", bundle: ..., traitCollection: ...)`
    static func icEmptyStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icEmptyStar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-fill-star", bundle: ..., traitCollection: ...)`
    static func icFillStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icFillStar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-halfstar", bundle: ..., traitCollection: ...)`
    static func icHalfstar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icHalfstar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-language", bundle: ..., traitCollection: ...)`
    static func icLanguage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLanguage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-lightning", bundle: ..., traitCollection: ...)`
    static func icLightning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLightning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-placeholderImg", bundle: ..., traitCollection: ...)`
    static func icPlaceholderImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icPlaceholderImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-setting", bundle: ..., traitCollection: ...)`
    static func icSetting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icSetting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-star", bundle: ..., traitCollection: ...)`
    static func icStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icStar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_apple", bundle: ..., traitCollection: ...)`
    static func ic_apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_left", bundle: ..., traitCollection: ...)`
    static func ic_arrow_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_right", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_banner", bundle: ..., traitCollection: ...)`
    static func ic_banner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_banner, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_calendar", bundle: ..., traitCollection: ...)`
    static func ic_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_caretright", bundle: ..., traitCollection: ...)`
    static func ic_caretright(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_caretright, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkmark", bundle: ..., traitCollection: ...)`
    static func ic_checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkmark_empty", bundle: ..., traitCollection: ...)`
    static func ic_checkmark_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkmark_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close_search", bundle: ..., traitCollection: ...)`
    static func ic_close_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_congcaphe", bundle: ..., traitCollection: ...)`
    static func ic_congcaphe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_congcaphe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dapass_logo", bundle: ..., traitCollection: ...)`
    static func ic_dapass_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dapass_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_date", bundle: ..., traitCollection: ...)`
    static func ic_date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_date, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_decrease", bundle: ..., traitCollection: ...)`
    static func ic_decrease(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_decrease, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete", bundle: ..., traitCollection: ...)`
    static func ic_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_eclipse", bundle: ..., traitCollection: ...)`
    static func ic_eclipse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_eclipse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_eclipse_gray", bundle: ..., traitCollection: ...)`
    static func ic_eclipse_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_eclipse_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_eye", bundle: ..., traitCollection: ...)`
    static func ic_eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_eyeslash", bundle: ..., traitCollection: ...)`
    static func ic_eyeslash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_eyeslash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_global", bundle: ..., traitCollection: ...)`
    static func ic_global(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_global, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_heart", bundle: ..., traitCollection: ...)`
    static func ic_heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_help", bundle: ..., traitCollection: ...)`
    static func ic_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_hotvoucher", bundle: ..., traitCollection: ...)`
    static func ic_hotvoucher(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hotvoucher, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_increase", bundle: ..., traitCollection: ...)`
    static func ic_increase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_increase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_kakaotalk", bundle: ..., traitCollection: ...)`
    static func ic_kakaotalk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_kakaotalk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_level_out", bundle: ..., traitCollection: ...)`
    static func ic_level_out(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_level_out, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_located", bundle: ..., traitCollection: ...)`
    static func ic_located(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_located, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_location", bundle: ..., traitCollection: ...)`
    static func ic_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mobile", bundle: ..., traitCollection: ...)`
    static func ic_mobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mobile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_momo", bundle: ..., traitCollection: ...)`
    static func ic_momo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_momo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_not", bundle: ..., traitCollection: ...)`
    static func ic_not(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_not, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_noti", bundle: ..., traitCollection: ...)`
    static func ic_noti(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_noti, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_people", bundle: ..., traitCollection: ...)`
    static func ic_people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_people, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_percent", bundle: ..., traitCollection: ...)`
    static func ic_percent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_percent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus", bundle: ..., traitCollection: ...)`
    static func ic_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_profile", bundle: ..., traitCollection: ...)`
    static func ic_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_provide", bundle: ..., traitCollection: ...)`
    static func ic_provide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_provide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_recently", bundle: ..., traitCollection: ...)`
    static func ic_recently(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recently, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_gray", bundle: ..., traitCollection: ...)`
    static func ic_search_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_see_more", bundle: ..., traitCollection: ...)`
    static func ic_see_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_see_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_selected", bundle: ..., traitCollection: ...)`
    static func ic_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_setting", bundle: ..., traitCollection: ...)`
    static func ic_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_share", bundle: ..., traitCollection: ...)`
    static func ic_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_showlist", bundle: ..., traitCollection: ...)`
    static func ic_showlist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_showlist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_suggestion", bundle: ..., traitCollection: ...)`
    static func ic_suggestion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_suggestion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_thunder", bundle: ..., traitCollection: ...)`
    static func ic_thunder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_thunder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_topcoupon", bundle: ..., traitCollection: ...)`
    static func ic_topcoupon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_topcoupon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user", bundle: ..., traitCollection: ...)`
    static func ic_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_visa", bundle: ..., traitCollection: ...)`
    static func ic_visa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_visa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_vnpay", bundle: ..., traitCollection: ...)`
    static func ic_vnpay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vnpay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_voucher_date", bundle: ..., traitCollection: ...)`
    static func ic_voucher_date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_voucher_date, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location-category-gradient", bundle: ..., traitCollection: ...)`
    static func locationCategoryGradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationCategoryGradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location-pin", bundle: ..., traitCollection: ...)`
    static func locationPin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationPin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo 1024", bundle: ..., traitCollection: ...)`
    static func logo1024(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo1024, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo VNPAY-2", bundle: ..., traitCollection: ...)`
    static func logoVNPAY2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoVNPAY2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nameLaunch", bundle: ..., traitCollection: ...)`
    static func nameLaunch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nameLaunch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "page_black", bundle: ..., traitCollection: ...)`
    static func page_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.page_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "page_gray", bundle: ..., traitCollection: ...)`
    static func page_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.page_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_community", bundle: ..., traitCollection: ...)`
    static func tabbar_community(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_community, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_home", bundle: ..., traitCollection: ...)`
    static func tabbar_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_location", bundle: ..., traitCollection: ...)`
    static func tabbar_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_notification", bundle: ..., traitCollection: ...)`
    static func tabbar_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_travel", bundle: ..., traitCollection: ...)`
    static func tabbar_travel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_travel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_voucher", bundle: ..., traitCollection: ...)`
    static func tabbar_voucher(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_voucher, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voucher_overdue", bundle: ..., traitCollection: ...)`
    static func voucher_overdue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voucher_overdue, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 57 nibs.
  struct nib {
    /// Nib `BrandInformationView`.
    static let brandInformationView = _R.nib._BrandInformationView()
    /// Nib `ChangePasswordViewController`.
    static let changePasswordViewController = _R.nib._ChangePasswordViewController()
    /// Nib `CustomerBillCell`.
    static let customerBillCell = _R.nib._CustomerBillCell()
    /// Nib `DatePickerViewController`.
    static let datePickerViewController = _R.nib._DatePickerViewController()
    /// Nib `DetailBillHeaderView`.
    static let detailBillHeaderView = _R.nib._DetailBillHeaderView()
    /// Nib `DetailBillViewController`.
    static let detailBillViewController = _R.nib._DetailBillViewController()
    /// Nib `DetailBrandBannerView`.
    static let detailBrandBannerView = _R.nib._DetailBrandBannerView()
    /// Nib `DetailBrandExpanseVoucherViewController`.
    static let detailBrandExpanseVoucherViewController = _R.nib._DetailBrandExpanseVoucherViewController()
    /// Nib `DetailBrandMenuCell`.
    static let detailBrandMenuCell = _R.nib._DetailBrandMenuCell()
    /// Nib `DetailBrandNearLocationAllViewController`.
    static let detailBrandNearLocationAllViewController = _R.nib._DetailBrandNearLocationAllViewController()
    /// Nib `DetailBrandNearLocationView`.
    static let detailBrandNearLocationView = _R.nib._DetailBrandNearLocationView()
    /// Nib `DetailBrandRecommendationMenuItem`.
    static let detailBrandRecommendationMenuItem = _R.nib._DetailBrandRecommendationMenuItem()
    /// Nib `DetailBrandRecommendationMenuView`.
    static let detailBrandRecommendationMenuView = _R.nib._DetailBrandRecommendationMenuView()
    /// Nib `DetailBrandReviewCell`.
    static let detailBrandReviewCell = _R.nib._DetailBrandReviewCell()
    /// Nib `DetailBrandReviewView`.
    static let detailBrandReviewView = _R.nib._DetailBrandReviewView()
    /// Nib `DetailBrandSummaryInformationView`.
    static let detailBrandSummaryInformationView = _R.nib._DetailBrandSummaryInformationView()
    /// Nib `DetailBrandVoucherView`.
    static let detailBrandVoucherView = _R.nib._DetailBrandVoucherView()
    /// Nib `DetailProductViewController`.
    static let detailProductViewController = _R.nib._DetailProductViewController()
    /// Nib `HomeBannerView`.
    static let homeBannerView = _R.nib._HomeBannerView()
    /// Nib `HomeHotVoucherCell`.
    static let homeHotVoucherCell = _R.nib._HomeHotVoucherCell()
    /// Nib `HomeHotVoucherView`.
    static let homeHotVoucherView = _R.nib._HomeHotVoucherView()
    /// Nib `HomeRecentBrandView`.
    static let homeRecentBrandView = _R.nib._HomeRecentBrandView()
    /// Nib `HomeRecentKeywordView`.
    static let homeRecentKeywordView = _R.nib._HomeRecentKeywordView()
    /// Nib `HomeSearchView`.
    static let homeSearchView = _R.nib._HomeSearchView()
    /// Nib `HomeTopChartCommunityCell`.
    static let homeTopChartCommunityCell = _R.nib._HomeTopChartCommunityCell()
    /// Nib `HomeTopChartsView`.
    static let homeTopChartsView = _R.nib._HomeTopChartsView()
    /// Nib `ListNotificationViewController`.
    static let listNotificationViewController = _R.nib._ListNotificationViewController()
    /// Nib `ListReviewViewController`.
    static let listReviewViewController = _R.nib._ListReviewViewController()
    /// Nib `NotificationCell`.
    static let notificationCell = _R.nib._NotificationCell()
    /// Nib `PaymentBillCell`.
    static let paymentBillCell = _R.nib._PaymentBillCell()
    /// Nib `ProductBillCell`.
    static let productBillCell = _R.nib._ProductBillCell()
    /// Nib `ProfileViewController`.
    static let profileViewController = _R.nib._ProfileViewController()
    /// Nib `QRViewController`.
    static let qrViewController = _R.nib._QRViewController()
    /// Nib `RatingOrderCell`.
    static let ratingOrderCell = _R.nib._RatingOrderCell()
    /// Nib `RecentKeywordCell`.
    static let recentKeywordCell = _R.nib._RecentKeywordCell()
    /// Nib `SafeFoodBannerView`.
    static let safeFoodBannerView = _R.nib._SafeFoodBannerView()
    /// Nib `SafeFoodBrandItem`.
    static let safeFoodBrandItem = _R.nib._SafeFoodBrandItem()
    /// Nib `SafeFoodHotItem`.
    static let safeFoodHotItem = _R.nib._SafeFoodHotItem()
    /// Nib `SafeFoodLoadingRow`.
    static let safeFoodLoadingRow = _R.nib._SafeFoodLoadingRow()
    /// Nib `SafeFoodOrderRow`.
    static let safeFoodOrderRow = _R.nib._SafeFoodOrderRow()
    /// Nib `SafeFoodTabTitleItem`.
    static let safeFoodTabTitleItem = _R.nib._SafeFoodTabTitleItem()
    /// Nib `SafeFoodVoucherApplyRow`.
    static let safeFoodVoucherApplyRow = _R.nib._SafeFoodVoucherApplyRow()
    /// Nib `SafeFoodVoucherItem`.
    static let safeFoodVoucherItem = _R.nib._SafeFoodVoucherItem()
    /// Nib `SafeFoodVoucherRow`.
    static let safeFoodVoucherRow = _R.nib._SafeFoodVoucherRow()
    /// Nib `SearchHeaderView`.
    static let searchHeaderView = _R.nib._SearchHeaderView()
    /// Nib `SearchHotVoucherCell`.
    static let searchHotVoucherCell = _R.nib._SearchHotVoucherCell()
    /// Nib `SearchHotVoucherItem`.
    static let searchHotVoucherItem = _R.nib._SearchHotVoucherItem()
    /// Nib `SearchInitialView`.
    static let searchInitialView = _R.nib._SearchInitialView()
    /// Nib `SearchListBrandViewController`.
    static let searchListBrandViewController = _R.nib._SearchListBrandViewController()
    /// Nib `SearchListNearLocationViewController`.
    static let searchListNearLocationViewController = _R.nib._SearchListNearLocationViewController()
    /// Nib `SearchListProductViewController`.
    static let searchListProductViewController = _R.nib._SearchListProductViewController()
    /// Nib `SearchListVoucherViewController`.
    static let searchListVoucherViewController = _R.nib._SearchListVoucherViewController()
    /// Nib `SearchNearLocationCell`.
    static let searchNearLocationCell = _R.nib._SearchNearLocationCell()
    /// Nib `SearchResultBrandCell`.
    static let searchResultBrandCell = _R.nib._SearchResultBrandCell()
    /// Nib `SearchResultProductCell`.
    static let searchResultProductCell = _R.nib._SearchResultProductCell()
    /// Nib `SearchResultView`.
    static let searchResultView = _R.nib._SearchResultView()
    /// Nib `VoucherBillCell`.
    static let voucherBillCell = _R.nib._VoucherBillCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BrandInformationView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.brandInformationView) instead")
    static func brandInformationView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.brandInformationView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChangePasswordViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.changePasswordViewController) instead")
    static func changePasswordViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.changePasswordViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomerBillCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customerBillCell) instead")
    static func customerBillCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customerBillCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DatePickerViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.datePickerViewController) instead")
    static func datePickerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.datePickerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBillHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBillHeaderView) instead")
    static func detailBillHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBillHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBillViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBillViewController) instead")
    static func detailBillViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBillViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBrandBannerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBrandBannerView) instead")
    static func detailBrandBannerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBrandBannerView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBrandExpanseVoucherViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBrandExpanseVoucherViewController) instead")
    static func detailBrandExpanseVoucherViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBrandExpanseVoucherViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBrandMenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBrandMenuCell) instead")
    static func detailBrandMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBrandMenuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBrandNearLocationAllViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBrandNearLocationAllViewController) instead")
    static func detailBrandNearLocationAllViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBrandNearLocationAllViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBrandNearLocationView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBrandNearLocationView) instead")
    static func detailBrandNearLocationView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBrandNearLocationView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBrandRecommendationMenuItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBrandRecommendationMenuItem) instead")
    static func detailBrandRecommendationMenuItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBrandRecommendationMenuItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBrandRecommendationMenuView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBrandRecommendationMenuView) instead")
    static func detailBrandRecommendationMenuView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBrandRecommendationMenuView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBrandReviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBrandReviewCell) instead")
    static func detailBrandReviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBrandReviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBrandReviewView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBrandReviewView) instead")
    static func detailBrandReviewView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBrandReviewView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBrandSummaryInformationView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBrandSummaryInformationView) instead")
    static func detailBrandSummaryInformationView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBrandSummaryInformationView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailBrandVoucherView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailBrandVoucherView) instead")
    static func detailBrandVoucherView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailBrandVoucherView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailProductViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailProductViewController) instead")
    static func detailProductViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailProductViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBannerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBannerView) instead")
    static func homeBannerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBannerView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeHotVoucherCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeHotVoucherCell) instead")
    static func homeHotVoucherCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeHotVoucherCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeHotVoucherView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeHotVoucherView) instead")
    static func homeHotVoucherView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeHotVoucherView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeRecentBrandView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeRecentBrandView) instead")
    static func homeRecentBrandView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeRecentBrandView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeRecentKeywordView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeRecentKeywordView) instead")
    static func homeRecentKeywordView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeRecentKeywordView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeSearchView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeSearchView) instead")
    static func homeSearchView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSearchView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeTopChartCommunityCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeTopChartCommunityCell) instead")
    static func homeTopChartCommunityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeTopChartCommunityCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeTopChartsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeTopChartsView) instead")
    static func homeTopChartsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeTopChartsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ListNotificationViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.listNotificationViewController) instead")
    static func listNotificationViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listNotificationViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ListReviewViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.listReviewViewController) instead")
    static func listReviewViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listReviewViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationCell) instead")
    static func notificationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaymentBillCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentBillCell) instead")
    static func paymentBillCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentBillCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductBillCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productBillCell) instead")
    static func productBillCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productBillCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileViewController) instead")
    static func profileViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QRViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.qrViewController) instead")
    static func qrViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qrViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RatingOrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ratingOrderCell) instead")
    static func ratingOrderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ratingOrderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RecentKeywordCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recentKeywordCell) instead")
    static func recentKeywordCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recentKeywordCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SafeFoodBannerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.safeFoodBannerView) instead")
    static func safeFoodBannerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.safeFoodBannerView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SafeFoodBrandItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.safeFoodBrandItem) instead")
    static func safeFoodBrandItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.safeFoodBrandItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SafeFoodHotItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.safeFoodHotItem) instead")
    static func safeFoodHotItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.safeFoodHotItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SafeFoodLoadingRow", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.safeFoodLoadingRow) instead")
    static func safeFoodLoadingRow(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.safeFoodLoadingRow)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SafeFoodOrderRow", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.safeFoodOrderRow) instead")
    static func safeFoodOrderRow(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.safeFoodOrderRow)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SafeFoodTabTitleItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.safeFoodTabTitleItem) instead")
    static func safeFoodTabTitleItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.safeFoodTabTitleItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SafeFoodVoucherApplyRow", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.safeFoodVoucherApplyRow) instead")
    static func safeFoodVoucherApplyRow(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.safeFoodVoucherApplyRow)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SafeFoodVoucherItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.safeFoodVoucherItem) instead")
    static func safeFoodVoucherItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.safeFoodVoucherItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SafeFoodVoucherRow", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.safeFoodVoucherRow) instead")
    static func safeFoodVoucherRow(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.safeFoodVoucherRow)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchHeaderView) instead")
    static func searchHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchHotVoucherCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchHotVoucherCell) instead")
    static func searchHotVoucherCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchHotVoucherCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchHotVoucherItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchHotVoucherItem) instead")
    static func searchHotVoucherItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchHotVoucherItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchInitialView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchInitialView) instead")
    static func searchInitialView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchInitialView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchListBrandViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchListBrandViewController) instead")
    static func searchListBrandViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchListBrandViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchListNearLocationViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchListNearLocationViewController) instead")
    static func searchListNearLocationViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchListNearLocationViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchListProductViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchListProductViewController) instead")
    static func searchListProductViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchListProductViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchListVoucherViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchListVoucherViewController) instead")
    static func searchListVoucherViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchListVoucherViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchNearLocationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchNearLocationCell) instead")
    static func searchNearLocationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchNearLocationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchResultBrandCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchResultBrandCell) instead")
    static func searchResultBrandCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchResultBrandCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchResultProductCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchResultProductCell) instead")
    static func searchResultProductCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchResultProductCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchResultView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchResultView) instead")
    static func searchResultView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchResultView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VoucherBillCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.voucherBillCell) instead")
    static func voucherBillCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.voucherBillCell)
    }
    #endif

    static func brandInformationView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.brandInformationView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func changePasswordViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.changePasswordViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func customerBillCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomerBillCell? {
      return R.nib.customerBillCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomerBillCell
    }

    static func datePickerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.datePickerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailBillHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailBillHeaderView? {
      return R.nib.detailBillHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailBillHeaderView
    }

    static func detailBillViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailBillViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailBrandBannerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailBrandBannerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailBrandExpanseVoucherViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailBrandExpanseVoucherViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailBrandMenuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailBrandMenuCell? {
      return R.nib.detailBrandMenuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailBrandMenuCell
    }

    static func detailBrandNearLocationAllViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailBrandNearLocationAllViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailBrandNearLocationView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailBrandNearLocationView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailBrandRecommendationMenuItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailBrandRecommendationMenuItem? {
      return R.nib.detailBrandRecommendationMenuItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailBrandRecommendationMenuItem
    }

    static func detailBrandRecommendationMenuView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailBrandRecommendationMenuView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailBrandReviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailBrandReviewCell? {
      return R.nib.detailBrandReviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailBrandReviewCell
    }

    static func detailBrandReviewView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailBrandReviewView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailBrandSummaryInformationView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailBrandSummaryInformationView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailBrandVoucherView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailBrandVoucherView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailProductViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailProductViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeBannerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeBannerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeHotVoucherCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeHotVoucherCell? {
      return R.nib.homeHotVoucherCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeHotVoucherCell
    }

    static func homeHotVoucherView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeHotVoucherView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeRecentBrandView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeRecentBrandView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeRecentKeywordView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeRecentKeywordView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeSearchView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeSearchView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeTopChartCommunityCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeTopChartCommunityCell? {
      return R.nib.homeTopChartCommunityCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTopChartCommunityCell
    }

    static func homeTopChartsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeTopChartsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func listNotificationViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.listNotificationViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func listReviewViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.listReviewViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func notificationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
      return R.nib.notificationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
    }

    static func paymentBillCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentBillCell? {
      return R.nib.paymentBillCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentBillCell
    }

    static func productBillCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductBillCell? {
      return R.nib.productBillCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductBillCell
    }

    static func profileViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func qrViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.qrViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func ratingOrderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RatingOrderCell? {
      return R.nib.ratingOrderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RatingOrderCell
    }

    static func recentKeywordCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecentKeywordCell? {
      return R.nib.recentKeywordCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecentKeywordCell
    }

    static func safeFoodBannerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.safeFoodBannerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func safeFoodBrandItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodBrandItem? {
      return R.nib.safeFoodBrandItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodBrandItem
    }

    static func safeFoodHotItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodHotItem? {
      return R.nib.safeFoodHotItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodHotItem
    }

    static func safeFoodLoadingRow(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodLoadingRow? {
      return R.nib.safeFoodLoadingRow.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodLoadingRow
    }

    static func safeFoodOrderRow(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodOrderRow? {
      return R.nib.safeFoodOrderRow.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodOrderRow
    }

    static func safeFoodTabTitleItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodTabTitleItem? {
      return R.nib.safeFoodTabTitleItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodTabTitleItem
    }

    static func safeFoodVoucherApplyRow(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodVoucherApplyRow? {
      return R.nib.safeFoodVoucherApplyRow.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodVoucherApplyRow
    }

    static func safeFoodVoucherItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodVoucherItem? {
      return R.nib.safeFoodVoucherItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodVoucherItem
    }

    static func safeFoodVoucherRow(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodVoucherRow? {
      return R.nib.safeFoodVoucherRow.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodVoucherRow
    }

    static func searchHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHeaderView? {
      return R.nib.searchHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHeaderView
    }

    static func searchHotVoucherCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHotVoucherCell? {
      return R.nib.searchHotVoucherCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHotVoucherCell
    }

    static func searchHotVoucherItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHotVoucherItem? {
      return R.nib.searchHotVoucherItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHotVoucherItem
    }

    static func searchInitialView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchInitialView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func searchListBrandViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchListBrandViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func searchListNearLocationViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchListNearLocationViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func searchListProductViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchListProductViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func searchListVoucherViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchListVoucherViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func searchNearLocationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchNearLocationCell? {
      return R.nib.searchNearLocationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchNearLocationCell
    }

    static func searchResultBrandCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchResultBrandCell? {
      return R.nib.searchResultBrandCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultBrandCell
    }

    static func searchResultProductCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchResultProductCell? {
      return R.nib.searchResultProductCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultProductCell
    }

    static func searchResultView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchResultView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func voucherBillCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VoucherBillCell? {
      return R.nib.voucherBillCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VoucherBillCell
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 84 localization keys.
    struct localizable {
      /// en translation: I agree to the terms and policies of SafeFood's Privacy Policy
      ///
      /// Locales: en, vi
      static let sign_up_need_accept_term_and_policy = Rswift.StringResource(key: "sign_up_need_accept_term_and_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation:  Please enter the 6-digit verification code sent to 
      ///
      /// Locales: en, vi
      static let digit_code_guide = Rswift.StringResource(key: "digit_code_guide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Account inactive. Please enter the 6-digit verification code sent to 
      ///
      /// Locales: en, vi
      static let digit_code_inactive = Rswift.StringResource(key: "digit_code_inactive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en, vi
      static let detail_brand_add = Rswift.StringResource(key: "detail_brand_add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Already a member? %@
      ///
      /// Locales: en, vi
      static let sign_up_already_a_member = Rswift.StringResource(key: "sign_up_already_a_member", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Buy Now
      ///
      /// Locales: en, vi
      static let detail_brand_buy = Rswift.StringResource(key: "detail_brand_buy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Category
      ///
      /// Locales: en, vi
      static let detail_brand_menu_category = Rswift.StringResource(key: "detail_brand_menu_category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Code number
      ///
      /// Locales: en, vi
      static let code_number = Rswift.StringResource(key: "code_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Code number
      ///
      /// Locales: en, vi
      static let digit_code_code_number = Rswift.StringResource(key: "digit_code_code_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, vi
      static let digit_code_verify = Rswift.StringResource(key: "digit_code_verify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en, vi
      static let sign_up_confirm_password = Rswift.StringResource(key: "sign_up_confirm_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Create Account
      ///
      /// Locales: en, vi
      static let sign_up = Rswift.StringResource(key: "sign_up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Create account
      ///
      /// Locales: en, vi
      static let create_account = Rswift.StringResource(key: "create_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, vi
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, vi
      static let forget_password_email = Rswift.StringResource(key: "forget_password_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, vi
      static let sign_in_email = Rswift.StringResource(key: "sign_in_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, vi
      static let sign_up_email = Rswift.StringResource(key: "sign_up_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Email invalid. Please check again 
      ///
      /// Locales: en, vi
      static let sign_in_email_error = Rswift.StringResource(key: "sign_in_email_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en, vi
      static let language_english = Rswift.StringResource(key: "language_english", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Enter Digit Code
      ///
      /// Locales: en, vi
      static let digit_code = Rswift.StringResource(key: "digit_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Enter Digit Code
      ///
      /// Locales: en, vi
      static let enter_digit_code = Rswift.StringResource(key: "enter_digit_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Enter verification code sent to 
      ///
      /// Locales: en, vi
      static let enter_verification_code = Rswift.StringResource(key: "enter_verification_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Enter your confirm password
      ///
      /// Locales: en, vi
      static let reset_password_placeholader_confirm_password = Rswift.StringResource(key: "reset_password_placeholader_confirm_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Enter your email
      ///
      /// Locales: en, vi
      static let sign_in_placehold_email = Rswift.StringResource(key: "sign_in_placehold_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Enter your email
      ///
      /// Locales: en, vi
      static let sign_up_enter_your_email = Rswift.StringResource(key: "sign_up_enter_your_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Enter your email address
      ///
      /// Locales: en, vi
      static let forget_password_enter_your_email = Rswift.StringResource(key: "forget_password_enter_your_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Enter your name
      ///
      /// Locales: en, vi
      static let sign_up_enter_your_name = Rswift.StringResource(key: "sign_up_enter_your_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Enter your new password
      ///
      /// Locales: en, vi
      static let reset_password_placeholder_new_password = Rswift.StringResource(key: "reset_password_placeholder_new_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Enter your password
      ///
      /// Locales: en, vi
      static let sign_in_placehold_password = Rswift.StringResource(key: "sign_in_placehold_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Enter your password
      ///
      /// Locales: en, vi
      static let sign_up_enter_your_password = Rswift.StringResource(key: "sign_up_enter_your_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Enter your registered email address and we will send you a password reset code
      ///
      /// Locales: en, vi
      static let forget_password_guide = Rswift.StringResource(key: "forget_password_guide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Experience
      ///
      /// Locales: en, vi
      static let sign_in_experience = Rswift.StringResource(key: "sign_in_experience", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en
      static let sign_up_first_name = Rswift.StringResource(key: "sign_up_first_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forgot password
      ///
      /// Locales: en, vi
      static let forget_password = Rswift.StringResource(key: "forget_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Forgot password
      ///
      /// Locales: en, vi
      static let sign_in_forgot_password = Rswift.StringResource(key: "sign_in_forgot_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Korea
      ///
      /// Locales: en, vi
      static let language_korea = Rswift.StringResource(key: "language_korea", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en
      static let sign_up_last_name = Rswift.StringResource(key: "sign_up_last_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, vi
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Login with Apple
      ///
      /// Locales: en, vi
      static let sign_in_apple = Rswift.StringResource(key: "sign_in_apple", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Login with Facebook
      ///
      /// Locales: en, vi
      static let sign_in_facebook = Rswift.StringResource(key: "sign_in_facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Login with Google
      ///
      /// Locales: en, vi
      static let sign_in_google = Rswift.StringResource(key: "sign_in_google", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Login with KakaoTalk
      ///
      /// Locales: en, vi
      static let sign_in_kakaoTalk = Rswift.StringResource(key: "sign_in_kakaoTalk", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Menu
      ///
      /// Locales: en, vi
      static let detail_brand_menu = Rswift.StringResource(key: "detail_brand_menu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, vi
      static let name = Rswift.StringResource(key: "name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Need an account? Sign up
      ///
      /// Locales: en, vi
      static let sign_in_need_a_count = Rswift.StringResource(key: "sign_in_need_a_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: New password
      ///
      /// Locales: en, vi
      static let reset_password_new_password = Rswift.StringResource(key: "reset_password_new_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Nice to meet you !
      ///
      /// Locales: en, vi
      static let sign_in_title = Rswift.StringResource(key: "sign_in_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: No product
      ///
      /// Locales: en, vi
      static let detail_brand_no_product = Rswift.StringResource(key: "detail_brand_no_product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Or
      ///
      /// Locales: en, vi
      static let sign_in_or = Rswift.StringResource(key: "sign_in_or", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Order Details
      ///
      /// Locales: en, vi
      static let detail_brand_order = Rswift.StringResource(key: "detail_brand_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, vi
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, vi
      static let sign_in_password = Rswift.StringResource(key: "sign_in_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, vi
      static let sign_up_password = Rswift.StringResource(key: "sign_up_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Password invalid. Please check again
      ///
      /// Locales: en, vi
      static let sign_in_password_error = Rswift.StringResource(key: "sign_in_password_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Payment
      ///
      /// Locales: en, vi
      static let detail_brand_payment = Rswift.StringResource(key: "detail_brand_payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: en
      static let sign_up_phone = Rswift.StringResource(key: "sign_up_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: en, vi
      static let phone = Rswift.StringResource(key: "phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Please enter a password of at least 8 characters with a combination of alphanumeric characters, including at least one uppercase letter.
      ///
      /// Locales: en, vi
      static let reset_password_guide = Rswift.StringResource(key: "reset_password_guide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Please enter a password of at least 8 characters with a combination of alphanumeric characters, including at least one uppercase letter.
      ///
      /// Locales: en, vi
      static let sign_up_password_convention = Rswift.StringResource(key: "sign_up_password_convention", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Please enter your email address and password below
      ///
      /// Locales: en, vi
      static let sign_in_reminder = Rswift.StringResource(key: "sign_in_reminder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Re-enter new password
      ///
      /// Locales: en, vi
      static let reset_password_confirm_password = Rswift.StringResource(key: "reset_password_confirm_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Re-enter your password
      ///
      /// Locales: en, vi
      static let sign_up_re_enter_password = Rswift.StringResource(key: "sign_up_re_enter_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Recommend
      ///
      /// Locales: en, vi
      static let detail_brand_recommend = Rswift.StringResource(key: "detail_brand_recommend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Resend code
      ///
      /// Locales: en, vi
      static let digit_code_resend_code = Rswift.StringResource(key: "digit_code_resend_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Resend code
      ///
      /// Locales: en, vi
      static let resend = Rswift.StringResource(key: "resend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Reset password
      ///
      /// Locales: en, vi
      static let reset_password = Rswift.StringResource(key: "reset_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Search...
      ///
      /// Locales: en, vi
      static let search = Rswift.StringResource(key: "search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, vi
      static let forget_password_send_button = Rswift.StringResource(key: "forget_password_send_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Sign In
      ///
      /// Locales: en, vi
      static let sign_in_option = Rswift.StringResource(key: "sign_in_option", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Sign In By Email
      ///
      /// Locales: en, vi
      static let sign_in_signInByEmail = Rswift.StringResource(key: "sign_in_signInByEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Sign Up By Email
      ///
      /// Locales: en, vi
      static let sign_in_signUpByEmail = Rswift.StringResource(key: "sign_in_signUpByEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Sign in
      ///
      /// Locales: en, vi
      static let sign_in = Rswift.StringResource(key: "sign_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Terms
      ///
      /// Locales: en, vi
      static let sign_in_terms = Rswift.StringResource(key: "sign_in_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: The information you entered is incorrect. Please enter again after confirmation
      ///
      /// Locales: en, vi
      static let sign_up_error = Rswift.StringResource(key: "sign_up_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Total discount
      ///
      /// Locales: en, vi
      static let detail_brand_total_discount = Rswift.StringResource(key: "detail_brand_total_discount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Total payment
      ///
      /// Locales: en, vi
      static let detail_brand_total_payment = Rswift.StringResource(key: "detail_brand_total_payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Verify
      ///
      /// Locales: en, vi
      static let verify = Rswift.StringResource(key: "verify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Vietnamese
      ///
      /// Locales: en, vi
      static let language_vietnamese = Rswift.StringResource(key: "language_vietnamese", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Voucher
      ///
      /// Locales: en, vi
      static let detail_brand_voucher = Rswift.StringResource(key: "detail_brand_voucher", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Your Birthday
      ///
      /// Locales: en
      static let sign_up_birthday = Rswift.StringResource(key: "sign_up_birthday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: product
      ///
      /// Locales: en, vi
      static let detail_brand_product = Rswift.StringResource(key: "detail_brand_product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: verification code
      ///
      /// Locales: en, vi
      static let verificaiton_code = Rswift.StringResource(key: "verificaiton_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: “Please select the quantity of the product you wish to purchase”
      ///
      /// Locales: en, vi
      static let detail_brand_detail_product_error = Rswift.StringResource(key: "detail_brand_detail_product_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: “Please select the quantity of the product you wish to purchase”
      ///
      /// Locales: en, vi
      static let detail_brand_menu_error = Rswift.StringResource(key: "detail_brand_menu_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)

      /// en translation: I agree to the terms and policies of SafeFood's Privacy Policy
      ///
      /// Locales: en, vi
      static func sign_up_need_accept_term_and_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_need_accept_term_and_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_need_accept_term_and_policy"
        }

        return NSLocalizedString("sign_up_need_accept_term_and_policy", bundle: bundle, comment: "")
      }

      /// en translation:  Please enter the 6-digit verification code sent to 
      ///
      /// Locales: en, vi
      static func digit_code_guide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("digit_code_guide", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "digit_code_guide"
        }

        return NSLocalizedString("digit_code_guide", bundle: bundle, comment: "")
      }

      /// en translation: Account inactive. Please enter the 6-digit verification code sent to 
      ///
      /// Locales: en, vi
      static func digit_code_inactive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("digit_code_inactive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "digit_code_inactive"
        }

        return NSLocalizedString("digit_code_inactive", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: en, vi
      static func detail_brand_add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_add"
        }

        return NSLocalizedString("detail_brand_add", bundle: bundle, comment: "")
      }

      /// en translation: Already a member? %@
      ///
      /// Locales: en, vi
      static func sign_up_already_a_member(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("sign_up_already_a_member", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_already_a_member"
        }

        let format = NSLocalizedString("sign_up_already_a_member", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Buy Now
      ///
      /// Locales: en, vi
      static func detail_brand_buy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_buy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_buy"
        }

        return NSLocalizedString("detail_brand_buy", bundle: bundle, comment: "")
      }

      /// en translation: Category
      ///
      /// Locales: en, vi
      static func detail_brand_menu_category(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_menu_category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_menu_category"
        }

        return NSLocalizedString("detail_brand_menu_category", bundle: bundle, comment: "")
      }

      /// en translation: Code number
      ///
      /// Locales: en, vi
      static func code_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("code_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "code_number"
        }

        return NSLocalizedString("code_number", bundle: bundle, comment: "")
      }

      /// en translation: Code number
      ///
      /// Locales: en, vi
      static func digit_code_code_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("digit_code_code_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "digit_code_code_number"
        }

        return NSLocalizedString("digit_code_code_number", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, vi
      static func digit_code_verify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("digit_code_verify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "digit_code_verify"
        }

        return NSLocalizedString("digit_code_verify", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en, vi
      static func sign_up_confirm_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_confirm_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_confirm_password"
        }

        return NSLocalizedString("sign_up_confirm_password", bundle: bundle, comment: "")
      }

      /// en translation: Create Account
      ///
      /// Locales: en, vi
      static func sign_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up"
        }

        return NSLocalizedString("sign_up", bundle: bundle, comment: "")
      }

      /// en translation: Create account
      ///
      /// Locales: en, vi
      static func create_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "create_account"
        }

        return NSLocalizedString("create_account", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, vi
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, vi
      static func forget_password_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forget_password_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forget_password_email"
        }

        return NSLocalizedString("forget_password_email", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, vi
      static func sign_in_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_email"
        }

        return NSLocalizedString("sign_in_email", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, vi
      static func sign_up_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_email"
        }

        return NSLocalizedString("sign_up_email", bundle: bundle, comment: "")
      }

      /// en translation: Email invalid. Please check again 
      ///
      /// Locales: en, vi
      static func sign_in_email_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_email_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_email_error"
        }

        return NSLocalizedString("sign_in_email_error", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en, vi
      static func language_english(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("language_english", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "language_english"
        }

        return NSLocalizedString("language_english", bundle: bundle, comment: "")
      }

      /// en translation: Enter Digit Code
      ///
      /// Locales: en, vi
      static func digit_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("digit_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "digit_code"
        }

        return NSLocalizedString("digit_code", bundle: bundle, comment: "")
      }

      /// en translation: Enter Digit Code
      ///
      /// Locales: en, vi
      static func enter_digit_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_digit_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_digit_code"
        }

        return NSLocalizedString("enter_digit_code", bundle: bundle, comment: "")
      }

      /// en translation: Enter verification code sent to 
      ///
      /// Locales: en, vi
      static func enter_verification_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_verification_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_verification_code"
        }

        return NSLocalizedString("enter_verification_code", bundle: bundle, comment: "")
      }

      /// en translation: Enter your confirm password
      ///
      /// Locales: en, vi
      static func reset_password_placeholader_confirm_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reset_password_placeholader_confirm_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reset_password_placeholader_confirm_password"
        }

        return NSLocalizedString("reset_password_placeholader_confirm_password", bundle: bundle, comment: "")
      }

      /// en translation: Enter your email
      ///
      /// Locales: en, vi
      static func sign_in_placehold_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_placehold_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_placehold_email"
        }

        return NSLocalizedString("sign_in_placehold_email", bundle: bundle, comment: "")
      }

      /// en translation: Enter your email
      ///
      /// Locales: en, vi
      static func sign_up_enter_your_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_enter_your_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_enter_your_email"
        }

        return NSLocalizedString("sign_up_enter_your_email", bundle: bundle, comment: "")
      }

      /// en translation: Enter your email address
      ///
      /// Locales: en, vi
      static func forget_password_enter_your_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forget_password_enter_your_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forget_password_enter_your_email"
        }

        return NSLocalizedString("forget_password_enter_your_email", bundle: bundle, comment: "")
      }

      /// en translation: Enter your name
      ///
      /// Locales: en, vi
      static func sign_up_enter_your_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_enter_your_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_enter_your_name"
        }

        return NSLocalizedString("sign_up_enter_your_name", bundle: bundle, comment: "")
      }

      /// en translation: Enter your new password
      ///
      /// Locales: en, vi
      static func reset_password_placeholder_new_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reset_password_placeholder_new_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reset_password_placeholder_new_password"
        }

        return NSLocalizedString("reset_password_placeholder_new_password", bundle: bundle, comment: "")
      }

      /// en translation: Enter your password
      ///
      /// Locales: en, vi
      static func sign_in_placehold_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_placehold_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_placehold_password"
        }

        return NSLocalizedString("sign_in_placehold_password", bundle: bundle, comment: "")
      }

      /// en translation: Enter your password
      ///
      /// Locales: en, vi
      static func sign_up_enter_your_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_enter_your_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_enter_your_password"
        }

        return NSLocalizedString("sign_up_enter_your_password", bundle: bundle, comment: "")
      }

      /// en translation: Enter your registered email address and we will send you a password reset code
      ///
      /// Locales: en, vi
      static func forget_password_guide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forget_password_guide", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forget_password_guide"
        }

        return NSLocalizedString("forget_password_guide", bundle: bundle, comment: "")
      }

      /// en translation: Experience
      ///
      /// Locales: en, vi
      static func sign_in_experience(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_experience", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_experience"
        }

        return NSLocalizedString("sign_in_experience", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en
      static func sign_up_first_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_first_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_first_name"
        }

        return NSLocalizedString("sign_up_first_name", bundle: bundle, comment: "")
      }

      /// en translation: Forgot password
      ///
      /// Locales: en, vi
      static func forget_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forget_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forget_password"
        }

        return NSLocalizedString("forget_password", bundle: bundle, comment: "")
      }

      /// en translation: Forgot password
      ///
      /// Locales: en, vi
      static func sign_in_forgot_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_forgot_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_forgot_password"
        }

        return NSLocalizedString("sign_in_forgot_password", bundle: bundle, comment: "")
      }

      /// en translation: Korea
      ///
      /// Locales: en, vi
      static func language_korea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("language_korea", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "language_korea"
        }

        return NSLocalizedString("language_korea", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en
      static func sign_up_last_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_last_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_last_name"
        }

        return NSLocalizedString("sign_up_last_name", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, vi
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login"
        }

        return NSLocalizedString("login", bundle: bundle, comment: "")
      }

      /// en translation: Login with Apple
      ///
      /// Locales: en, vi
      static func sign_in_apple(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_apple", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_apple"
        }

        return NSLocalizedString("sign_in_apple", bundle: bundle, comment: "")
      }

      /// en translation: Login with Facebook
      ///
      /// Locales: en, vi
      static func sign_in_facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_facebook"
        }

        return NSLocalizedString("sign_in_facebook", bundle: bundle, comment: "")
      }

      /// en translation: Login with Google
      ///
      /// Locales: en, vi
      static func sign_in_google(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_google", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_google"
        }

        return NSLocalizedString("sign_in_google", bundle: bundle, comment: "")
      }

      /// en translation: Login with KakaoTalk
      ///
      /// Locales: en, vi
      static func sign_in_kakaoTalk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_kakaoTalk", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_kakaoTalk"
        }

        return NSLocalizedString("sign_in_kakaoTalk", bundle: bundle, comment: "")
      }

      /// en translation: Menu
      ///
      /// Locales: en, vi
      static func detail_brand_menu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_menu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_menu"
        }

        return NSLocalizedString("detail_brand_menu", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, vi
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "name"
        }

        return NSLocalizedString("name", bundle: bundle, comment: "")
      }

      /// en translation: Need an account? Sign up
      ///
      /// Locales: en, vi
      static func sign_in_need_a_count(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_need_a_count", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_need_a_count"
        }

        return NSLocalizedString("sign_in_need_a_count", bundle: bundle, comment: "")
      }

      /// en translation: New password
      ///
      /// Locales: en, vi
      static func reset_password_new_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reset_password_new_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reset_password_new_password"
        }

        return NSLocalizedString("reset_password_new_password", bundle: bundle, comment: "")
      }

      /// en translation: Nice to meet you !
      ///
      /// Locales: en, vi
      static func sign_in_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_title"
        }

        return NSLocalizedString("sign_in_title", bundle: bundle, comment: "")
      }

      /// en translation: No product
      ///
      /// Locales: en, vi
      static func detail_brand_no_product(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_no_product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_no_product"
        }

        return NSLocalizedString("detail_brand_no_product", bundle: bundle, comment: "")
      }

      /// en translation: Or
      ///
      /// Locales: en, vi
      static func sign_in_or(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_or", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_or"
        }

        return NSLocalizedString("sign_in_or", bundle: bundle, comment: "")
      }

      /// en translation: Order Details
      ///
      /// Locales: en, vi
      static func detail_brand_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_order"
        }

        return NSLocalizedString("detail_brand_order", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, vi
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, vi
      static func sign_in_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_password"
        }

        return NSLocalizedString("sign_in_password", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, vi
      static func sign_up_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_password"
        }

        return NSLocalizedString("sign_up_password", bundle: bundle, comment: "")
      }

      /// en translation: Password invalid. Please check again
      ///
      /// Locales: en, vi
      static func sign_in_password_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_password_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_password_error"
        }

        return NSLocalizedString("sign_in_password_error", bundle: bundle, comment: "")
      }

      /// en translation: Payment
      ///
      /// Locales: en, vi
      static func detail_brand_payment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_payment"
        }

        return NSLocalizedString("detail_brand_payment", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: en
      static func sign_up_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_phone"
        }

        return NSLocalizedString("sign_up_phone", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: en, vi
      static func phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone"
        }

        return NSLocalizedString("phone", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a password of at least 8 characters with a combination of alphanumeric characters, including at least one uppercase letter.
      ///
      /// Locales: en, vi
      static func reset_password_guide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reset_password_guide", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reset_password_guide"
        }

        return NSLocalizedString("reset_password_guide", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a password of at least 8 characters with a combination of alphanumeric characters, including at least one uppercase letter.
      ///
      /// Locales: en, vi
      static func sign_up_password_convention(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_password_convention", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_password_convention"
        }

        return NSLocalizedString("sign_up_password_convention", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your email address and password below
      ///
      /// Locales: en, vi
      static func sign_in_reminder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_reminder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_reminder"
        }

        return NSLocalizedString("sign_in_reminder", bundle: bundle, comment: "")
      }

      /// en translation: Re-enter new password
      ///
      /// Locales: en, vi
      static func reset_password_confirm_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reset_password_confirm_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reset_password_confirm_password"
        }

        return NSLocalizedString("reset_password_confirm_password", bundle: bundle, comment: "")
      }

      /// en translation: Re-enter your password
      ///
      /// Locales: en, vi
      static func sign_up_re_enter_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_re_enter_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_re_enter_password"
        }

        return NSLocalizedString("sign_up_re_enter_password", bundle: bundle, comment: "")
      }

      /// en translation: Recommend
      ///
      /// Locales: en, vi
      static func detail_brand_recommend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_recommend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_recommend"
        }

        return NSLocalizedString("detail_brand_recommend", bundle: bundle, comment: "")
      }

      /// en translation: Resend code
      ///
      /// Locales: en, vi
      static func digit_code_resend_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("digit_code_resend_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "digit_code_resend_code"
        }

        return NSLocalizedString("digit_code_resend_code", bundle: bundle, comment: "")
      }

      /// en translation: Resend code
      ///
      /// Locales: en, vi
      static func resend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resend"
        }

        return NSLocalizedString("resend", bundle: bundle, comment: "")
      }

      /// en translation: Reset password
      ///
      /// Locales: en, vi
      static func reset_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reset_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reset_password"
        }

        return NSLocalizedString("reset_password", bundle: bundle, comment: "")
      }

      /// en translation: Search...
      ///
      /// Locales: en, vi
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search"
        }

        return NSLocalizedString("search", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, vi
      static func forget_password_send_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forget_password_send_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forget_password_send_button"
        }

        return NSLocalizedString("forget_password_send_button", bundle: bundle, comment: "")
      }

      /// en translation: Sign In
      ///
      /// Locales: en, vi
      static func sign_in_option(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_option", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_option"
        }

        return NSLocalizedString("sign_in_option", bundle: bundle, comment: "")
      }

      /// en translation: Sign In By Email
      ///
      /// Locales: en, vi
      static func sign_in_signInByEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_signInByEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_signInByEmail"
        }

        return NSLocalizedString("sign_in_signInByEmail", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up By Email
      ///
      /// Locales: en, vi
      static func sign_in_signUpByEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_signUpByEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_signUpByEmail"
        }

        return NSLocalizedString("sign_in_signUpByEmail", bundle: bundle, comment: "")
      }

      /// en translation: Sign in
      ///
      /// Locales: en, vi
      static func sign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in"
        }

        return NSLocalizedString("sign_in", bundle: bundle, comment: "")
      }

      /// en translation: Terms
      ///
      /// Locales: en, vi
      static func sign_in_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_terms"
        }

        return NSLocalizedString("sign_in_terms", bundle: bundle, comment: "")
      }

      /// en translation: The information you entered is incorrect. Please enter again after confirmation
      ///
      /// Locales: en, vi
      static func sign_up_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_error"
        }

        return NSLocalizedString("sign_up_error", bundle: bundle, comment: "")
      }

      /// en translation: Total discount
      ///
      /// Locales: en, vi
      static func detail_brand_total_discount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_total_discount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_total_discount"
        }

        return NSLocalizedString("detail_brand_total_discount", bundle: bundle, comment: "")
      }

      /// en translation: Total payment
      ///
      /// Locales: en, vi
      static func detail_brand_total_payment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_total_payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_total_payment"
        }

        return NSLocalizedString("detail_brand_total_payment", bundle: bundle, comment: "")
      }

      /// en translation: Verify
      ///
      /// Locales: en, vi
      static func verify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify"
        }

        return NSLocalizedString("verify", bundle: bundle, comment: "")
      }

      /// en translation: Vietnamese
      ///
      /// Locales: en, vi
      static func language_vietnamese(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("language_vietnamese", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "language_vietnamese"
        }

        return NSLocalizedString("language_vietnamese", bundle: bundle, comment: "")
      }

      /// en translation: Voucher
      ///
      /// Locales: en, vi
      static func detail_brand_voucher(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_voucher"
        }

        return NSLocalizedString("detail_brand_voucher", bundle: bundle, comment: "")
      }

      /// en translation: Your Birthday
      ///
      /// Locales: en
      static func sign_up_birthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_birthday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_birthday"
        }

        return NSLocalizedString("sign_up_birthday", bundle: bundle, comment: "")
      }

      /// en translation: product
      ///
      /// Locales: en, vi
      static func detail_brand_product(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_product"
        }

        return NSLocalizedString("detail_brand_product", bundle: bundle, comment: "")
      }

      /// en translation: verification code
      ///
      /// Locales: en, vi
      static func verificaiton_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verificaiton_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verificaiton_code"
        }

        return NSLocalizedString("verificaiton_code", bundle: bundle, comment: "")
      }

      /// en translation: “Please select the quantity of the product you wish to purchase”
      ///
      /// Locales: en, vi
      static func detail_brand_detail_product_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_detail_product_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_detail_product_error"
        }

        return NSLocalizedString("detail_brand_detail_product_error", bundle: bundle, comment: "")
      }

      /// en translation: “Please select the quantity of the product you wish to purchase”
      ///
      /// Locales: en, vi
      static func detail_brand_menu_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_brand_menu_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_brand_menu_error"
        }

        return NSLocalizedString("detail_brand_menu_error", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BrandInformationView.validate()
      try _ChangePasswordViewController.validate()
      try _DatePickerViewController.validate()
      try _DetailBillViewController.validate()
      try _DetailBrandMenuCell.validate()
      try _DetailBrandReviewCell.validate()
      try _DetailBrandSummaryInformationView.validate()
      try _DetailProductViewController.validate()
      try _HomeHotVoucherCell.validate()
      try _HomeSearchView.validate()
      try _ListNotificationViewController.validate()
      try _PaymentBillCell.validate()
      try _QRViewController.validate()
      try _RatingOrderCell.validate()
      try _RecentKeywordCell.validate()
      try _SafeFoodBrandItem.validate()
      try _SafeFoodHotItem.validate()
      try _SafeFoodOrderRow.validate()
      try _SafeFoodVoucherApplyRow.validate()
      try _SafeFoodVoucherItem.validate()
      try _SafeFoodVoucherRow.validate()
      try _SearchHeaderView.validate()
    }

    struct _BrandInformationView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BrandInformationView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-empty-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-empty-star' is used in nib 'BrandInformationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-fill-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-fill-star' is used in nib 'BrandInformationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-halfstar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-halfstar' is used in nib 'BrandInformationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_congcaphe", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_congcaphe' is used in nib 'BrandInformationView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'BrandInformationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in nib 'BrandInformationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "yellowFFCF6F", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'yellowFFCF6F' is used in nib 'BrandInformationView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ChangePasswordViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChangePasswordViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_eyeslash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_eyeslash' is used in nib 'ChangePasswordViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'ChangePasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in nib 'ChangePasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in nib 'ChangePasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in nib 'ChangePasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "whiteF5F5F5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'whiteF5F5F5' is used in nib 'ChangePasswordViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CustomerBillCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomerBillCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomerBillCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomerBillCell
      }

      fileprivate init() {}
    }

    struct _DatePickerViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DatePickerViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in nib 'DatePickerViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black1A1A1A", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black1A1A1A' is used in nib 'DatePickerViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue007AFF", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue007AFF' is used in nib 'DatePickerViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayD9D9D9", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayD9D9D9' is used in nib 'DatePickerViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in nib 'DatePickerViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DetailBillHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailBillHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailBillHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailBillHeaderView
      }

      fileprivate init() {}
    }

    struct _DetailBillViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailBillViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bill-qr", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bill-qr' is used in nib 'DetailBillViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-back' is used in nib 'DetailBillViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "GrayE8E8E8", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GrayE8E8E8' is used in nib 'DetailBillViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'DetailBillViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in nib 'DetailBillViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in nib 'DetailBillViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in nib 'DetailBillViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DetailBrandBannerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailBrandBannerView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DetailBrandExpanseVoucherViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailBrandExpanseVoucherViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DetailBrandMenuCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailBrandMenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailBrandMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailBrandMenuCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "detail-brand-menu-add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'detail-brand-menu-add' is used in nib 'DetailBrandMenuCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "detail-brand-menu-minus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'detail-brand-menu-minus' is used in nib 'DetailBrandMenuCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'DetailBrandMenuCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in nib 'DetailBrandMenuCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in nib 'DetailBrandMenuCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayE8E8E8", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayE8E8E8' is used in nib 'DetailBrandMenuCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DetailBrandNearLocationAllViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailBrandNearLocationAllViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DetailBrandNearLocationView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailBrandNearLocationView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DetailBrandRecommendationMenuItem: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailBrandRecommendationMenuItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailBrandRecommendationMenuItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailBrandRecommendationMenuItem
      }

      fileprivate init() {}
    }

    struct _DetailBrandRecommendationMenuView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailBrandRecommendationMenuView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DetailBrandReviewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailBrandReviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailBrandReviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailBrandReviewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-empty-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-empty-star' is used in nib 'DetailBrandReviewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-fill-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-fill-star' is used in nib 'DetailBrandReviewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "gray454546", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray454546' is used in nib 'DetailBrandReviewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in nib 'DetailBrandReviewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "whiteF5F5F5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'whiteF5F5F5' is used in nib 'DetailBrandReviewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "yellowFFCF6F", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'yellowFFCF6F' is used in nib 'DetailBrandReviewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DetailBrandReviewView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailBrandReviewView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DetailBrandSummaryInformationView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailBrandSummaryInformationView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "detail-brand-clock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'detail-brand-clock' is used in nib 'DetailBrandSummaryInformationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "detail-brand-location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'detail-brand-location' is used in nib 'DetailBrandSummaryInformationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "detail-brand-time", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'detail-brand-time' is used in nib 'DetailBrandSummaryInformationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heart_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heart_red' is used in nib 'DetailBrandSummaryInformationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-empty-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-empty-star' is used in nib 'DetailBrandSummaryInformationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-fill-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-fill-star' is used in nib 'DetailBrandSummaryInformationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-halfstar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-halfstar' is used in nib 'DetailBrandSummaryInformationView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'DetailBrandSummaryInformationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in nib 'DetailBrandSummaryInformationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "yellowFFCF6F", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'yellowFFCF6F' is used in nib 'DetailBrandSummaryInformationView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DetailBrandVoucherView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailBrandVoucherView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DetailProductViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailProductViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "detail-brand-menu-add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'detail-brand-menu-add' is used in nib 'DetailProductViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "detail-brand-menu-minus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'detail-brand-menu-minus' is used in nib 'DetailProductViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-back' is used in nib 'DetailProductViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "GrayE8E8E8", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GrayE8E8E8' is used in nib 'DetailProductViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'DetailProductViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in nib 'DetailProductViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in nib 'DetailProductViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in nib 'DetailProductViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in nib 'DetailProductViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeBannerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeBannerView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HomeHotVoucherCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeHotVoucherCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeHotVoucherCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeHotVoucherCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_hotvoucher", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_hotvoucher' is used in nib 'HomeHotVoucherCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black50", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black50' is used in nib 'HomeHotVoucherCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in nib 'HomeHotVoucherCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeHotVoucherView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeHotVoucherView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HomeRecentBrandView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeRecentBrandView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HomeRecentKeywordView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeRecentKeywordView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HomeSearchView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeSearchView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search' is used in nib 'HomeSearchView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'HomeSearchView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in nib 'HomeSearchView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeTopChartCommunityCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeTopChartCommunityCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeTopChartCommunityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTopChartCommunityCell
      }

      fileprivate init() {}
    }

    struct _HomeTopChartsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeTopChartsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ListNotificationViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ListNotificationViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-back' is used in nib 'ListNotificationViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'ListNotificationViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in nib 'ListNotificationViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in nib 'ListNotificationViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in nib 'ListNotificationViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ListReviewViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ListReviewViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _NotificationCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
      }

      fileprivate init() {}
    }

    struct _PaymentBillCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PaymentBillCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentBillCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentBillCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_checkmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checkmark' is used in nib 'PaymentBillCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo VNPAY-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo VNPAY-2' is used in nib 'PaymentBillCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'PaymentBillCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayD6D6D6", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayD6D6D6' is used in nib 'PaymentBillCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProductBillCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProductBillCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductBillCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductBillCell
      }

      fileprivate init() {}
    }

    struct _ProfileViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _QRViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QRViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "logo 1024", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo 1024' is used in nib 'QRViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'QRViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in nib 'QRViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _RatingOrderCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RatingOrderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RatingOrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RatingOrderCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-fill-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-fill-star' is used in nib 'RatingOrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-star' is used in nib 'RatingOrderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "grayD6D6D6", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayD6D6D6' is used in nib 'RatingOrderCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "yellowFFCF6F", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'yellowFFCF6F' is used in nib 'RatingOrderCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _RecentKeywordCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RecentKeywordCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecentKeywordCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecentKeywordCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-close' is used in nib 'RecentKeywordCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in nib 'RecentKeywordCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SafeFoodBannerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SafeFoodBannerView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SafeFoodBrandItem: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SafeFoodBrandItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodBrandItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodBrandItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-empty-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-empty-star' is used in nib 'SafeFoodBrandItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-fill-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-fill-star' is used in nib 'SafeFoodBrandItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-halfstar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-halfstar' is used in nib 'SafeFoodBrandItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'SafeFoodBrandItem', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in nib 'SafeFoodBrandItem', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in nib 'SafeFoodBrandItem', but couldn't be loaded.") }
          if UIKit.UIColor(named: "yellowFFCF6F", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'yellowFFCF6F' is used in nib 'SafeFoodBrandItem', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SafeFoodHotItem: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SafeFoodHotItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodHotItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodHotItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-fill-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-fill-star' is used in nib 'SafeFoodHotItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right' is used in nib 'SafeFoodHotItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'SafeFoodHotItem', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in nib 'SafeFoodHotItem', but couldn't be loaded.") }
          if UIKit.UIColor(named: "yellowFFCF6F", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'yellowFFCF6F' is used in nib 'SafeFoodHotItem', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SafeFoodLoadingRow: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SafeFoodLoadingRow"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodLoadingRow? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodLoadingRow
      }

      fileprivate init() {}
    }

    struct _SafeFoodOrderRow: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SafeFoodOrderRow"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodOrderRow? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodOrderRow
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-fill-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-fill-star' is used in nib 'SafeFoodOrderRow', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-star' is used in nib 'SafeFoodOrderRow', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_congcaphe", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_congcaphe' is used in nib 'SafeFoodOrderRow', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in nib 'SafeFoodOrderRow', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in nib 'SafeFoodOrderRow', but couldn't be loaded.") }
          if UIKit.UIColor(named: "yellowFFCF6F", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'yellowFFCF6F' is used in nib 'SafeFoodOrderRow', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SafeFoodTabTitleItem: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SafeFoodTabTitleItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodTabTitleItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodTabTitleItem
      }

      fileprivate init() {}
    }

    struct _SafeFoodVoucherApplyRow: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SafeFoodVoucherApplyRow"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodVoucherApplyRow? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodVoucherApplyRow
      }

      static func validate() throws {
        if UIKit.UIImage(named: "authentication-checkmark-empty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'authentication-checkmark-empty' is used in nib 'SafeFoodVoucherApplyRow', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_percent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_percent' is used in nib 'SafeFoodVoucherApplyRow', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'SafeFoodVoucherApplyRow', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in nib 'SafeFoodVoucherApplyRow', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in nib 'SafeFoodVoucherApplyRow', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SafeFoodVoucherItem: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SafeFoodVoucherItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodVoucherItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodVoucherItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-lightning", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-lightning' is used in nib 'SafeFoodVoucherItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'SafeFoodVoucherItem', but couldn't be loaded.") }
          if UIKit.UIColor(named: "black50", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black50' is used in nib 'SafeFoodVoucherItem', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in nib 'SafeFoodVoucherItem', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in nib 'SafeFoodVoucherItem', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in nib 'SafeFoodVoucherItem', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SafeFoodVoucherRow: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SafeFoodVoucherRow"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SafeFoodVoucherRow? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SafeFoodVoucherRow
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_percent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_percent' is used in nib 'SafeFoodVoucherRow', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'SafeFoodVoucherRow', but couldn't be loaded.") }
          if UIKit.UIColor(named: "black50", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black50' is used in nib 'SafeFoodVoucherRow', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in nib 'SafeFoodVoucherRow', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in nib 'SafeFoodVoucherRow', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in nib 'SafeFoodVoucherRow', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in nib 'SafeFoodVoucherRow', but couldn't be loaded.") }
          if UIKit.UIColor(named: "yellowFFCF6F", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'yellowFFCF6F' is used in nib 'SafeFoodVoucherRow', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SearchHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_see_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_see_more' is used in nib 'SearchHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in nib 'SearchHeaderView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in nib 'SearchHeaderView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SearchHotVoucherCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchHotVoucherCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHotVoucherCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHotVoucherCell
      }

      fileprivate init() {}
    }

    struct _SearchHotVoucherItem: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchHotVoucherItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHotVoucherItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHotVoucherItem
      }

      fileprivate init() {}
    }

    struct _SearchInitialView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchInitialView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SearchListBrandViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchListBrandViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SearchListNearLocationViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchListNearLocationViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SearchListProductViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchListProductViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SearchListVoucherViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchListVoucherViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SearchNearLocationCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchNearLocationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchNearLocationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchNearLocationCell
      }

      fileprivate init() {}
    }

    struct _SearchResultBrandCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchResultBrandCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchResultBrandCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultBrandCell
      }

      fileprivate init() {}
    }

    struct _SearchResultProductCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchResultProductCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchResultProductCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultProductCell
      }

      fileprivate init() {}
    }

    struct _SearchResultView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchResultView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _VoucherBillCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VoucherBillCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VoucherBillCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VoucherBillCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try chooseVoucherViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try detailBrandViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try detailVoucherViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try digitVerifyCodeViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try forgotPasswordViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try homeTopChartBrandViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try homeTopChartCommunityViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try homeTopChartVoucherViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try homeViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try listBrandApplyVoucherViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try listHotVoucherViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try listRecentBrandViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try listVoucherViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try locationViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try managerViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try menuBrandViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try ratingViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try resetPasswordViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try searchViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settingViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try signInViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try signUpViewController.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct chooseVoucherViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chooseVoucherViewController = StoryboardViewControllerResource<ChooseVoucherViewController>(identifier: "ChooseVoucherViewController")
      let name = "ChooseVoucherViewController"

      func chooseVoucherViewController(_: Void = ()) -> ChooseVoucherViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chooseVoucherViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in storyboard 'ChooseVoucherViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'ChooseVoucherViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'ChooseVoucherViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.chooseVoucherViewController().chooseVoucherViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chooseVoucherViewController' could not be loaded from storyboard 'ChooseVoucherViewController' as 'ChooseVoucherViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct detailBrandViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailBrandViewController = StoryboardViewControllerResource<DetailBrandViewController>(identifier: "DetailBrandViewController")
      let name = "DetailBrandViewController"

      func detailBrandViewController(_: Void = ()) -> DetailBrandViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailBrandViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_see_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_see_more' is used in storyboard 'DetailBrandViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'DetailBrandViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in storyboard 'DetailBrandViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayE8E8E8", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayE8E8E8' is used in storyboard 'DetailBrandViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'DetailBrandViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.detailBrandViewController().detailBrandViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailBrandViewController' could not be loaded from storyboard 'DetailBrandViewController' as 'DetailBrandViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct detailVoucherViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailVoucherViewController = StoryboardViewControllerResource<DetailVoucherViewController>(identifier: "DetailVoucherViewController")
      let name = "DetailVoucherViewController"

      func detailVoucherViewController(_: Void = ()) -> DetailVoucherViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailVoucherViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-back' is used in storyboard 'DetailVoucherViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "GrayE8E8E8", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GrayE8E8E8' is used in storyboard 'DetailVoucherViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'DetailVoucherViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in storyboard 'DetailVoucherViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in storyboard 'DetailVoucherViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'DetailVoucherViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'DetailVoucherViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.detailVoucherViewController().detailVoucherViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailVoucherViewController' could not be loaded from storyboard 'DetailVoucherViewController' as 'DetailVoucherViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct digitVerifyCodeViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let digitVerifyCodeViewController = StoryboardViewControllerResource<DigitVerifyCodeViewController>(identifier: "DigitVerifyCodeViewController")
      let name = "DigitVerifyCodeViewController"

      func digitVerifyCodeViewController(_: Void = ()) -> DigitVerifyCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: digitVerifyCodeViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'DigitVerifyCodeViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'DigitVerifyCodeViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "black1A1A1A", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black1A1A1A' is used in storyboard 'DigitVerifyCodeViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in storyboard 'DigitVerifyCodeViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayD9D9D9", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayD9D9D9' is used in storyboard 'DigitVerifyCodeViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'DigitVerifyCodeViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.digitVerifyCodeViewController().digitVerifyCodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'digitVerifyCodeViewController' could not be loaded from storyboard 'DigitVerifyCodeViewController' as 'DigitVerifyCodeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct forgotPasswordViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let forgotPasswordViewController = StoryboardViewControllerResource<ForgotPasswordViewController>(identifier: "ForgotPasswordViewController")
      let name = "ForgotPasswordViewController"

      func forgotPasswordViewController(_: Void = ()) -> ForgotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'ForgotPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in storyboard 'ForgotPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'ForgotPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'ForgotPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "whiteF5F5F5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'whiteF5F5F5' is used in storyboard 'ForgotPasswordViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.forgotPasswordViewController().forgotPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'ForgotPasswordViewController' as 'ForgotPasswordViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct homeTopChartBrandViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let homeTopChartBrandViewController = StoryboardViewControllerResource<HomeTopChartBrandViewController>(identifier: "HomeTopChartBrandViewController")
      let name = "HomeTopChartBrandViewController"

      func homeTopChartBrandViewController(_: Void = ()) -> HomeTopChartBrandViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeTopChartBrandViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.homeTopChartBrandViewController().homeTopChartBrandViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeTopChartBrandViewController' could not be loaded from storyboard 'HomeTopChartBrandViewController' as 'HomeTopChartBrandViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct homeTopChartCommunityViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let homeTopChartCommunityViewController = StoryboardViewControllerResource<HomeTopChartCommunityViewController>(identifier: "HomeTopChartCommunityViewController")
      let name = "HomeTopChartCommunityViewController"

      func homeTopChartCommunityViewController(_: Void = ()) -> HomeTopChartCommunityViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeTopChartCommunityViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "grayE8E8E8", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayE8E8E8' is used in storyboard 'HomeTopChartCommunityViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.homeTopChartCommunityViewController().homeTopChartCommunityViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeTopChartCommunityViewController' could not be loaded from storyboard 'HomeTopChartCommunityViewController' as 'HomeTopChartCommunityViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct homeTopChartVoucherViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let homeTopChartVoucherViewController = StoryboardViewControllerResource<HomeTopChartVoucherViewController>(identifier: "HomeTopChartVoucherViewController")
      let name = "HomeTopChartVoucherViewController"

      func homeTopChartVoucherViewController(_: Void = ()) -> HomeTopChartVoucherViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeTopChartVoucherViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.homeTopChartVoucherViewController().homeTopChartVoucherViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeTopChartVoucherViewController' could not be loaded from storyboard 'HomeTopChartVoucherViewController' as 'HomeTopChartVoucherViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct homeViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "HomeViewController"

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_arrow_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right' is used in storyboard 'HomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profile' is used in storyboard 'HomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_see_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_see_more' is used in storyboard 'HomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo 1024", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo 1024' is used in storyboard 'HomeViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'HomeViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'HomeViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "redFF2929", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'redFF2929' is used in storyboard 'HomeViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.homeViewController().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'HomeViewController' as 'HomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "authentication-background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'authentication-background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo 1024", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo 1024' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct listBrandApplyVoucherViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let listBrandApplyVoucherViewController = StoryboardViewControllerResource<ListBrandApplyVoucherViewController>(identifier: "ListBrandApplyVoucherViewController")
      let name = "ListBrandApplyVoucherViewController"

      func listBrandApplyVoucherViewController(_: Void = ()) -> ListBrandApplyVoucherViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listBrandApplyVoucherViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.listBrandApplyVoucherViewController().listBrandApplyVoucherViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listBrandApplyVoucherViewController' could not be loaded from storyboard 'ListBrandApplyVoucherViewController' as 'ListBrandApplyVoucherViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct listHotVoucherViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let listHotVoucherViewController = StoryboardViewControllerResource<ListHotVoucherViewController>(identifier: "ListHotVoucherViewController")
      let name = "ListHotVoucherViewController"

      func listHotVoucherViewController(_: Void = ()) -> ListHotVoucherViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listHotVoucherViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.listHotVoucherViewController().listHotVoucherViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listHotVoucherViewController' could not be loaded from storyboard 'ListHotVoucherViewController' as 'ListHotVoucherViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct listRecentBrandViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let listRecentBrandViewController = StoryboardViewControllerResource<ListRecentBrandViewController>(identifier: "ListRecentBrandViewController")
      let name = "ListRecentBrandViewController"

      func listRecentBrandViewController(_: Void = ()) -> ListRecentBrandViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listRecentBrandViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.listRecentBrandViewController().listRecentBrandViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listRecentBrandViewController' could not be loaded from storyboard 'ListRecentBrandViewController' as 'ListRecentBrandViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct listVoucherViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let listVoucherViewController = StoryboardViewControllerResource<ListVoucherViewController>(identifier: "ListVoucherViewController")
      let name = "ListVoucherViewController"

      func listVoucherViewController(_: Void = ()) -> ListVoucherViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listVoucherViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search' is used in storyboard 'ListVoucherViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'ListVoucherViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'ListVoucherViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.listVoucherViewController().listVoucherViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listVoucherViewController' could not be loaded from storyboard 'ListVoucherViewController' as 'ListVoucherViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct locationViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let locationViewController = StoryboardViewControllerResource<LocationViewController>(identifier: "LocationViewController")
      let name = "LocationViewController"

      func locationViewController(_: Void = ()) -> LocationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: locationViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_located", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_located' is used in storyboard 'LocationViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'LocationViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'LocationViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.locationViewController().locationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'locationViewController' could not be loaded from storyboard 'LocationViewController' as 'LocationViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct managerViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let managerViewController = StoryboardViewControllerResource<ManagerViewController>(identifier: "ManagerViewController")
      let name = "ManagerViewController"

      func managerViewController(_: Void = ()) -> ManagerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: managerViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'ManagerViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'ManagerViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'ManagerViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.managerViewController().managerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'managerViewController' could not be loaded from storyboard 'ManagerViewController' as 'ManagerViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct menuBrandViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let menuBrandViewController = StoryboardViewControllerResource<MenuBrandViewController>(identifier: "MenuBrandViewController")
      let name = "MenuBrandViewController"

      func menuBrandViewController(_: Void = ()) -> MenuBrandViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuBrandViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'MenuBrandViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in storyboard 'MenuBrandViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'MenuBrandViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'MenuBrandViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.menuBrandViewController().menuBrandViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuBrandViewController' could not be loaded from storyboard 'MenuBrandViewController' as 'MenuBrandViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct ratingViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RatingViewController"
      let ratingViewController = StoryboardViewControllerResource<RatingViewController>(identifier: "RatingViewController")

      func ratingViewController(_: Void = ()) -> RatingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ratingViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-close' is used in storyboard 'RatingViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-empty-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-empty-star' is used in storyboard 'RatingViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-fill-star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-fill-star' is used in storyboard 'RatingViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "GrayE8E8E8", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GrayE8E8E8' is used in storyboard 'RatingViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'RatingViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in storyboard 'RatingViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'RatingViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayD6D6D6", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayD6D6D6' is used in storyboard 'RatingViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayF3F3F3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayF3F3F3' is used in storyboard 'RatingViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'RatingViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "yellowFFCF6F", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'yellowFFCF6F' is used in storyboard 'RatingViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.ratingViewController().ratingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ratingViewController' could not be loaded from storyboard 'RatingViewController' as 'RatingViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct resetPasswordViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ResetPasswordViewController"
      let resetPasswordViewController = StoryboardViewControllerResource<ResetPasswordViewController>(identifier: "ResetPasswordViewController")

      func resetPasswordViewController(_: Void = ()) -> ResetPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_eyeslash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_eyeslash' is used in storyboard 'ResetPasswordViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'ResetPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in storyboard 'ResetPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'ResetPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'ResetPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "whiteF5F5F5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'whiteF5F5F5' is used in storyboard 'ResetPasswordViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.resetPasswordViewController().resetPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordViewController' could not be loaded from storyboard 'ResetPasswordViewController' as 'ResetPasswordViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct searchViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchViewController"
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")

      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-back' is used in storyboard 'SearchViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'SearchViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'SearchViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'SearchViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.searchViewController().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'SearchViewController' as 'SearchViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settingViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SettingViewController"
      let settingViewController = StoryboardViewControllerResource<SettingViewController>(identifier: "SettingViewController")

      func settingViewController(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-change-password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-change-password' is used in storyboard 'SettingViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-language", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-language' is used in storyboard 'SettingViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_help", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_help' is used in storyboard 'SettingViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user' is used in storyboard 'SettingViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'SettingViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in storyboard 'SettingViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray737374", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray737374' is used in storyboard 'SettingViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'SettingViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'SettingViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.settingViewController().settingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingViewController' could not be loaded from storyboard 'SettingViewController' as 'SettingViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct signInViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignInViewController"
      let signInViewController = StoryboardViewControllerResource<SignInViewController>(identifier: "SignInViewController")

      func signInViewController(_: Void = ()) -> SignInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "authentication-facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'authentication-facebook' is used in storyboard 'SignInViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "authentication-google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'authentication-google' is used in storyboard 'SignInViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "authentication-password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'authentication-password' is used in storyboard 'SignInViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "authentication-username", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'authentication-username' is used in storyboard 'SignInViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_eyeslash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_eyeslash' is used in storyboard 'SignInViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Blue4285F4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Blue4285F4' is used in storyboard 'SignInViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "GrayE8E8E8", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GrayE8E8E8' is used in storyboard 'SignInViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'SignInViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4285F4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4285F4' is used in storyboard 'SignInViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'SignInViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'SignInViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.signInViewController().signInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'SignInViewController' as 'SignInViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct signUpViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignUpViewController"
      let signUpViewController = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewController")

      func signUpViewController(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "authentication-checkmark-empty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'authentication-checkmark-empty' is used in storyboard 'SignUpViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "authentication-sign-up-canlendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'authentication-sign-up-canlendar' is used in storyboard 'SignUpViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_eyeslash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_eyeslash' is used in storyboard 'SignUpViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black100' is used in storyboard 'SignUpViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue4789FA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue4789FA' is used in storyboard 'SignUpViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayA2A2A3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayA2A2A3' is used in storyboard 'SignUpViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white100' is used in storyboard 'SignUpViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "whiteF5F5F5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'whiteF5F5F5' is used in storyboard 'SignUpViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.signUpViewController().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'SignUpViewController' as 'SignUpViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
